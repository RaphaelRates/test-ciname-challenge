<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.3.2 (Python 3.12.7 on win32)" generated="2025-10-28T17:27:40.652655" rpa="false" schemaversion="5">
<suite id="s1" name="Server" source="C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\tests\server">
<suite id="s1-s1" name="Auth" source="C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\tests\server\auth.robot">
<test id="s1-s1-t1" name="TC001 - Cadastro de Usuário com Email Já Existente" line="9">
<kw name="Create API Session" owner="auth" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.021223" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${URL_API}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:41.021223" elapsed="0.000000"/>
</kw>
<doc>Cria a sessão de RequestsLibrary.</doc>
<status status="PASS" start="2025-10-28T17:27:41.020724" elapsed="0.000499"/>
</kw>
<kw name="Get Time" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.022231" level="INFO">${timestamp} = 1761683261</msg>
<var>${timestamp}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<status status="PASS" start="2025-10-28T17:27:41.022231" elapsed="0.000000"/>
</kw>
<kw name="Catenate" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.023230" level="INFO">${existing_email} = teste_existente_1761683261@email.com</msg>
<var>${existing_email}</var>
<arg>SEPARATOR=</arg>
<arg>teste_existente_${timestamp}@email.com</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<status status="PASS" start="2025-10-28T17:27:41.022231" elapsed="0.000999"/>
</kw>
<kw name="Register And Perform Login" owner="auth">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.024228" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.024228" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.024228" level="INFO">${body} = {'email': 'teste_existente_1761683261@email.com', 'password': 'senha456', 'name': 'New Test User', 'role': 'user # &lt;-- INCLUA ROLE NO BODY'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>name=${name}</arg>
<arg>role=${role} # &lt;-- INCLUA ROLE NO BODY</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.024228" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.227335" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '140'} 
 body=b'{"email": "teste_existente_1761683261@email.com", "password": "senha456", "name": "New Test User", "role": "user # &lt;-- INCLUA ROLE NO BODY"}' 
 </msg>
<msg time="2025-10-28T17:27:41.227335" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=201, reason=Created 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '324', 'ETag': 'W/"144-t3kvHQug9NvaNNiMg9uYxsYOh4w"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"6901273db07ad8ec5dda511a","name":"New Test User","email":"teste_existente_1761683261@email.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTExYSIsImlhdCI6MTc2MTY4MzI2MSwiZXhwIjoxNzYxNzY5NjYxfQ.oHJarCbDav1sCO4TrSO-X3E2IJOwrdnRJsVbOglMogM"}} 
 </msg>
<msg time="2025-10-28T17:27:41.227335" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.024228" elapsed="0.203107"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.229336" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>201</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.228336" elapsed="0.001000"/>
</kw>
<kw name="Perform Valid Login" owner="auth">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.229336" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.229336" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.230842" level="INFO">${body} = {'email': 'teste_existente_1761683261@email.com', 'password': 'senha456'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.229336" elapsed="0.001506"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.361983" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '73'} 
 body=b'{"email": "teste_existente_1761683261@email.com", "password": "senha456"}' 
 </msg>
<msg time="2025-10-28T17:27:41.361983" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '324', 'ETag': 'W/"144-t3kvHQug9NvaNNiMg9uYxsYOh4w"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"6901273db07ad8ec5dda511a","name":"New Test User","email":"teste_existente_1761683261@email.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTExYSIsImlhdCI6MTc2MTY4MzI2MSwiZXhwIjoxNzYxNzY5NjYxfQ.oHJarCbDav1sCO4TrSO-X3E2IJOwrdnRJsVbOglMogM"}} 
 </msg>
<msg time="2025-10-28T17:27:41.361983" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.230842" elapsed="0.131141"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.361983" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.361983" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.361983" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.361983" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.361983" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTExYSIsImlhdCI6MTc2MTY4MzI2MSwiZXhwIjoxNzYxNzY5NjYxfQ.oHJarCbDav1sCO4TrSO-X3E2IJOwrdnRJsVbOglMogM</msg>
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:41.361983" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="PASS" start="2025-10-28T17:27:41.361983" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:41.367965" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTExYSIsImlhdCI6MTc2MTY4MzI2MSwiZXhwIjoxNzYxNzY5NjYxfQ.oHJarCbDav1sCO4TrSO-X3E2IJOwrdnRJsVbOglMogM</msg>
<var>${token}</var>
<arg>${email}</arg>
<arg>${password}</arg>
<doc>Realiza login e retorna o token JWT.</doc>
<status status="PASS" start="2025-10-28T17:27:41.229336" elapsed="0.138629"/>
</kw>
<return>
<value>${token}</value>
<status status="PASS" start="2025-10-28T17:27:41.367965" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:41.367965" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTExYSIsImlhdCI6MTc2MTY4MzI2MSwiZXhwIjoxNzYxNzY5NjYxfQ.oHJarCbDav1sCO4TrSO-X3E2IJOwrdnRJsVbOglMogM</msg>
<var>${token}</var>
<arg>${existing_email}</arg>
<arg>${NEW_USER_PASSWORD}</arg>
<doc>Registra um novo usuário e faz login imediatamente.</doc>
<status status="PASS" start="2025-10-28T17:27:41.023230" elapsed="0.344735"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.367965" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.367965" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.368972" level="INFO">${body} = {'name': 'Duplicate User', 'email': 'teste_existente_1761683261@email.com', 'password': 'senha456'}</msg>
<var>${body}</var>
<arg>name=Duplicate User</arg>
<arg>email=${existing_email}</arg>
<arg>password=${NEW_USER_PASSWORD}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.367965" elapsed="0.001007"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.431093" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '99'} 
 body=b'{"name": "Duplicate User", "email": "teste_existente_1761683261@email.com", "password": "senha456"}' 
 </msg>
<msg time="2025-10-28T17:27:41.431093" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=400, reason=Bad Request 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '49', 'ETag': 'W/"31-WKEMg8zALB1Ko0WjUHi/6RBGHVc"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"User already exists"} 
 </msg>
<msg time="2025-10-28T17:27:41.431093" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=400</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.368972" elapsed="0.062121"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.431093" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>400</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.431093" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.431093" level="INFO">Response da duplicação: {'success': False, 'message': 'User already exists'}</msg>
<arg>Response da duplicação: ${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:41.431093" elapsed="0.000000"/>
</kw>
<doc>Tenta cadastrar usuário com email já registrado - CORRIGIDO</doc>
<status status="PASS" start="2025-10-28T17:27:41.017630" elapsed="0.413463"/>
</test>
<test id="s1-s1-t2" name="TC002 - Cadastro com Dados Inválidos" line="20">
<kw name="Create API Session" owner="auth" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.431093" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${URL_API}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:41.431093" elapsed="0.000000"/>
</kw>
<doc>Cria a sessão de RequestsLibrary.</doc>
<status status="PASS" start="2025-10-28T17:27:41.431093" elapsed="0.000000"/>
</kw>
<kw name="Get Time" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.431093" level="INFO">${timestamp} = 1761683261</msg>
<var>${timestamp}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<status status="PASS" start="2025-10-28T17:27:41.431093" elapsed="0.000000"/>
</kw>
<kw name="Create List" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.439438" level="INFO">@{test_cases} = [ {'name': '', 'email': 'teste1761683261@email.com', 'password': '123456'} | {'name': 'Test User', 'email': 'email-invalido', 'password': '123456'} | {'name': 'Test User', 'email': 'teste17616832612@e...</msg>
<var>@{test_cases}</var>
<arg>${{{"name": "", "email": "teste${timestamp}@email.com", "password": "123456"}}}</arg>
<arg>${{{"name": "Test User", "email": "email-invalido", "password": "123456"}}}</arg>
<arg>${{{"name": "Test User", "email": "teste${timestamp}2@email.com", "password": "123"}}}</arg>
<arg>${{{"name": "Test User", "email": "", "password": "123456"}}}</arg>
<doc>Returns a list containing given items.</doc>
<status status="PASS" start="2025-10-28T17:27:41.431093" elapsed="0.008345"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.439438" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.439438" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.500969" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '72'} 
 body=b'{"name": "", "email": "teste1761683261@email.com", "password": "123456"}' 
 </msg>
<msg time="2025-10-28T17:27:41.500969" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=400, reason=Bad Request 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '84', 'ETag': 'W/"54-ngttIdQLZ4eaUkzci3s3HkS64jw"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Validation failed","errors":{"name":"Name is required"}} 
 </msg>
<msg time="2025-10-28T17:27:41.500969" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${test_case}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=400</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.439438" elapsed="0.061531"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.504359" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>400</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.504359" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.506803" level="INFO">Response para caso inválido: {'success': False, 'message': 'Validation failed', 'errors': {'name': 'Name is required'}}</msg>
<arg>Response para caso inválido: ${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:41.504359" elapsed="0.002444"/>
</kw>
<var name="${test_case}">{'name': '', 'email': 'teste1761683261@email.com', 'password': '123456'}</var>
<status status="PASS" start="2025-10-28T17:27:41.439438" elapsed="0.067365"/>
</iter>
<iter>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.506803" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.506803" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.581090" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '70'} 
 body=b'{"name": "Test User", "email": "email-invalido", "password": "123456"}' 
 </msg>
<msg time="2025-10-28T17:27:41.581090" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=400, reason=Bad Request 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '97', 'ETag': 'W/"61-Krv9gnZpw94ZcTkLQB5OMXVuBok"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Validation failed","errors":{"email":"Please provide a valid email"}} 
 </msg>
<msg time="2025-10-28T17:27:41.581090" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${test_case}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=400</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.506803" elapsed="0.074287"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.583184" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>400</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.581090" elapsed="0.002094"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.583184" level="INFO">Response para caso inválido: {'success': False, 'message': 'Validation failed', 'errors': {'email': 'Please provide a valid email'}}</msg>
<arg>Response para caso inválido: ${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:41.583184" elapsed="0.000000"/>
</kw>
<var name="${test_case}">{'name': 'Test User', 'email': 'email-invalido', 'password': '123456'}</var>
<status status="PASS" start="2025-10-28T17:27:41.506803" elapsed="0.076381"/>
</iter>
<iter>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.583184" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.583184" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.660999" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '79'} 
 body=b'{"name": "Test User", "email": "teste17616832612@email.com", "password": "123"}' 
 </msg>
<msg time="2025-10-28T17:27:41.660999" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=400, reason=Bad Request 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '115', 'ETag': 'W/"73-2kjRr4xheMpIIlrrmnuX+9CkBCA"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Validation failed","errors":{"password":"Password must be at least 6 characters long"}} 
 </msg>
<msg time="2025-10-28T17:27:41.660999" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${test_case}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=400</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.583184" elapsed="0.077815"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.660999" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>400</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.660999" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.660999" level="INFO">Response para caso inválido: {'success': False, 'message': 'Validation failed', 'errors': {'password': 'Password must be at least 6 characters long'}}</msg>
<arg>Response para caso inválido: ${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:41.660999" elapsed="0.000000"/>
</kw>
<var name="${test_case}">{'name': 'Test User', 'email': 'teste17616832612@email.com', 'password': '123'}</var>
<status status="PASS" start="2025-10-28T17:27:41.583184" elapsed="0.077815"/>
</iter>
<iter>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.660999" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.660999" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.731161" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"name": "Test User", "email": "", "password": "123456"}' 
 </msg>
<msg time="2025-10-28T17:27:41.731161" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=400, reason=Bad Request 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '86', 'ETag': 'W/"56-2AeNYjR8esCaF35ZnD5LBawWrNs"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Validation failed","errors":{"email":"Email is required"}} 
 </msg>
<msg time="2025-10-28T17:27:41.731161" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${test_case}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=400</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.660999" elapsed="0.070162"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.731161" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>400</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.731161" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.731161" level="INFO">Response para caso inválido: {'success': False, 'message': 'Validation failed', 'errors': {'email': 'Email is required'}}</msg>
<arg>Response para caso inválido: ${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:41.731161" elapsed="0.000000"/>
</kw>
<var name="${test_case}">{'name': 'Test User', 'email': '', 'password': '123456'}</var>
<status status="PASS" start="2025-10-28T17:27:41.660999" elapsed="0.070162"/>
</iter>
<var>${test_case}</var>
<value>@{test_cases}</value>
<status status="PASS" start="2025-10-28T17:27:41.439438" elapsed="0.291723"/>
</for>
<doc>Testa registro com dados faltantes/inválidos - CORRIGIDO</doc>
<status status="PASS" start="2025-10-28T17:27:41.431093" elapsed="0.300068"/>
</test>
<test id="s1-s1-t3" name="TC003 - Login com Credenciais Inválidas" line="37">
<kw name="Create API Session" owner="auth" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.735956" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${URL_API}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.000000"/>
</kw>
<doc>Cria a sessão de RequestsLibrary.</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.000000"/>
</kw>
<kw name="Get Time" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.735956" level="INFO">${timestamp} = 1761683261</msg>
<var>${timestamp}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.000000"/>
</kw>
<kw name="Catenate" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.735956" level="INFO">${valid_email} = teste_login_invalido_1761683261@email.com</msg>
<var>${valid_email}</var>
<arg>SEPARATOR=</arg>
<arg>teste_login_invalido_${timestamp}@email.com</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.000000"/>
</kw>
<kw name="Register And Perform Login" owner="auth">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.735956" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.735956" level="INFO">${body} = {'email': 'teste_login_invalido_1761683261@email.com', 'password': 'senha456', 'name': 'New Test User', 'role': 'user # &lt;-- INCLUA ROLE NO BODY'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>name=${name}</arg>
<arg>role=${role} # &lt;-- INCLUA ROLE NO BODY</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:41.931066" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '145'} 
 body=b'{"email": "teste_login_invalido_1761683261@email.com", "password": "senha456", "name": "New Test User", "role": "user # &lt;-- INCLUA ROLE NO BODY"}' 
 </msg>
<msg time="2025-10-28T17:27:41.931066" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=201, reason=Created 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '329', 'ETag': 'W/"149-IBlNL5TSvOiN1E5O+XIbztLWzM8"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"6901273db07ad8ec5dda5127","name":"New Test User","email":"teste_login_invalido_1761683261@email.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTEyNyIsImlhdCI6MTc2MTY4MzI2MSwiZXhwIjoxNzYxNzY5NjYxfQ.iHMTFQazdKHrhAL2TWvxDXTJRNtfhx80BtnArl7AJ18"}} 
 </msg>
<msg time="2025-10-28T17:27:41.937410" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.201454"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.937410" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>201</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:41.937410" elapsed="0.000000"/>
</kw>
<kw name="Perform Valid Login" owner="auth">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.937410" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.937410" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:41.937410" level="INFO">${body} = {'email': 'teste_login_invalido_1761683261@email.com', 'password': 'senha456'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:41.937410" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.064713" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '78'} 
 body=b'{"email": "teste_login_invalido_1761683261@email.com", "password": "senha456"}' 
 </msg>
<msg time="2025-10-28T17:27:42.064713" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '329', 'ETag': 'W/"149-XiWeuDSHauo+HKmPny2/tH6fwUU"', 'Date': 'Tue, 28 Oct 2025 20:27:41 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"6901273db07ad8ec5dda5127","name":"New Test User","email":"teste_login_invalido_1761683261@email.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTEyNyIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.gk5DnawhSzzu8qEtvhWm5Ut-9klQDnsMdPnvUmk8ELk"}} 
 </msg>
<msg time="2025-10-28T17:27:42.064713" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:41.937410" elapsed="0.127303"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.064713" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.064713" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.064713" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.064713" elapsed="0.004807"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.069846" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTEyNyIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.gk5DnawhSzzu8qEtvhWm5Ut-9klQDnsMdPnvUmk8ELk</msg>
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:42.069520" elapsed="0.000326"/>
</kw>
<return>
<value>${token}</value>
<status status="PASS" start="2025-10-28T17:27:42.069846" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:42.071062" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTEyNyIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.gk5DnawhSzzu8qEtvhWm5Ut-9klQDnsMdPnvUmk8ELk</msg>
<var>${token}</var>
<arg>${email}</arg>
<arg>${password}</arg>
<doc>Realiza login e retorna o token JWT.</doc>
<status status="PASS" start="2025-10-28T17:27:41.937410" elapsed="0.133652"/>
</kw>
<return>
<value>${token}</value>
<status status="PASS" start="2025-10-28T17:27:42.071062" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:42.071062" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNkYjA3YWQ4ZWM1ZGRhNTEyNyIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.gk5DnawhSzzu8qEtvhWm5Ut-9klQDnsMdPnvUmk8ELk</msg>
<var>${token}</var>
<arg>${valid_email}</arg>
<arg>${NEW_USER_PASSWORD}</arg>
<doc>Registra um novo usuário e faz login imediatamente.</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.335106"/>
</kw>
<kw name="Create List" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.073073" level="INFO">@{invalid_credentials} = [ {'email': 'naoexiste@email.com', 'password': 'senha456'} | {'email': 'teste_login_invalido_1761683261@email.com', 'password': 'senhaerrada'} ]</msg>
<var>@{invalid_credentials}</var>
<arg>${{{"email": "naoexiste@email.com", "password": "${NEW_USER_PASSWORD}"}}}</arg>
<arg>${{{"email": "${valid_email}", "password": "senhaerrada"}}}</arg>
<doc>Returns a list containing given items.</doc>
<status status="PASS" start="2025-10-28T17:27:42.071062" elapsed="0.002011"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.074079" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.074079" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.138769" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "naoexiste@email.com", "password": "senha456"}' 
 </msg>
<msg time="2025-10-28T17:27:42.138769" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:42.138769" level="INFO">${response} = &lt;Response [401]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${credentials}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=401</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.074079" elapsed="0.064690"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.140909" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>401</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.138769" elapsed="0.002140"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.140909" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>False</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.140909" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.140909" level="INFO">Response login inválido: {'success': False, 'message': 'Invalid email or password'}</msg>
<arg>Response login inválido: ${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:42.140909" elapsed="0.000000"/>
</kw>
<var name="${credentials}">{'email': 'naoexiste@email.com', 'password': 'senha456'}</var>
<status status="PASS" start="2025-10-28T17:27:42.074079" elapsed="0.066830"/>
</iter>
<iter>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.140909" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.140909" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.263723" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '81'} 
 body=b'{"email": "teste_login_invalido_1761683261@email.com", "password": "senhaerrada"}' 
 </msg>
<msg time="2025-10-28T17:27:42.263723" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:42.263723" level="INFO">${response} = &lt;Response [401]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${credentials}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=401</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.140909" elapsed="0.122814"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.263723" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>401</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.263723" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.270673" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>False</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.263723" elapsed="0.006950"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.270673" level="INFO">Response login inválido: {'success': False, 'message': 'Invalid email or password'}</msg>
<arg>Response login inválido: ${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:42.270673" elapsed="0.000000"/>
</kw>
<var name="${credentials}">{'email': 'teste_login_invalido_1761683261@email.com', 'password': 'senhaerrada'}</var>
<status status="PASS" start="2025-10-28T17:27:42.140909" elapsed="0.129764"/>
</iter>
<var>${credentials}</var>
<value>@{invalid_credentials}</value>
<status status="PASS" start="2025-10-28T17:27:42.074079" elapsed="0.196594"/>
</for>
<doc>Testa login com email/senha incorretos - CORRIGIDO</doc>
<status status="PASS" start="2025-10-28T17:27:41.735956" elapsed="0.534717"/>
</test>
<test id="s1-s1-t4" name="TC004 - Acesso ao Perfil com Token Inválido" line="56">
<kw name="Create API Session" owner="auth" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.270673" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${URL_API}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:42.270673" elapsed="0.000000"/>
</kw>
<doc>Cria a sessão de RequestsLibrary.</doc>
<status status="PASS" start="2025-10-28T17:27:42.270673" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.270673" level="INFO">${headers} = {'Content-Type': 'application/json', 'Authorization': 'Bearer token_invalido_123'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<arg>Authorization=Bearer token_invalido_123</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.270673" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.277627" level="INFO">GET Request : url=http://localhost:3000/api/v1/auth/me 
 path_url=/api/v1/auth/me 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'Bearer token_invalido_123'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:42.277627" level="INFO">GET Response : url=http://localhost:3000/api/v1/auth/me 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '65', 'ETag': 'W/"41-TJq3LYiwj1On+7IZ17oLU5tM1Zs"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Not authorized to access this route"} 
 </msg>
<msg time="2025-10-28T17:27:42.277627" level="INFO">${response} = &lt;Response [401]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/me</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=401</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.270673" elapsed="0.006954"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.277627" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>401</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.277627" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.281232" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>False</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.280690" elapsed="0.000542"/>
</kw>
<doc>Tenta acessar /auth/me com token inválido - CORRIGIDO</doc>
<status status="PASS" start="2025-10-28T17:27:42.270673" elapsed="0.010559"/>
</test>
<test id="s1-s1-t5" name="TC005 - Fluxo Completo de Autenticação" line="68">
<kw name="Create API Session" owner="auth" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.281232" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${URL_API}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:42.281232" elapsed="0.000000"/>
</kw>
<doc>Cria a sessão de RequestsLibrary.</doc>
<status status="PASS" start="2025-10-28T17:27:42.281232" elapsed="0.000000"/>
</kw>
<kw name="Get Time" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.284029" level="INFO">${timestamp} = 1761683262</msg>
<var>${timestamp}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<status status="PASS" start="2025-10-28T17:27:42.284029" elapsed="0.000000"/>
</kw>
<kw name="Catenate" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.284029" level="INFO">${flow_email} = teste_fluxo_1761683262@email.com</msg>
<var>${flow_email}</var>
<arg>SEPARATOR=</arg>
<arg>teste_fluxo_${timestamp}@email.com</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<status status="PASS" start="2025-10-28T17:27:42.284029" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.285038" level="INFO">${new_name} = Usuário Fluxo Completo</msg>
<var>${new_name}</var>
<arg>Usuário Fluxo Completo</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:42.285038" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.285038" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.285038" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.285038" level="INFO">${register_body} = {'name': 'Usuario Inicial', 'email': 'teste_fluxo_1761683262@email.com', 'password': 'senha456'}</msg>
<var>${register_body}</var>
<arg>name=Usuario Inicial</arg>
<arg>email=${flow_email}</arg>
<arg>password=${NEW_USER_PASSWORD}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.285038" elapsed="0.000998"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.472009" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/register 
 path_url=/api/v1/auth/register 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '96'} 
 body=b'{"name": "Usuario Inicial", "email": "teste_fluxo_1761683262@email.com", "password": "senha456"}' 
 </msg>
<msg time="2025-10-28T17:27:42.472009" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/register 
 status=201, reason=Created 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '322', 'ETag': 'W/"142-A+dO+XHj3lCTvyjTATOEJoeO+oc"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"6901273eb07ad8ec5dda512d","name":"Usuario Inicial","email":"teste_fluxo_1761683262@email.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEov_EHQND18G24Lch-pYCPRBOiPCEjy9mew"}} 
 </msg>
<msg time="2025-10-28T17:27:42.472009" level="INFO">${register_response} = &lt;Response [201]&gt;</msg>
<var>${register_response}</var>
<arg>cinema_api</arg>
<arg>/auth/register</arg>
<arg>json=${register_body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.286036" elapsed="0.185973"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.472009" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${register_response.status_code}</arg>
<arg>201</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.472009" elapsed="0.000000"/>
</kw>
<kw name="Perform Valid Login" owner="auth">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.472009" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.472009" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.472009" level="INFO">${body} = {'email': 'teste_fluxo_1761683262@email.com', 'password': 'senha456'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.472009" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.600619" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '69'} 
 body=b'{"email": "teste_fluxo_1761683262@email.com", "password": "senha456"}' 
 </msg>
<msg time="2025-10-28T17:27:42.600619" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '322', 'ETag': 'W/"142-A+dO+XHj3lCTvyjTATOEJoeO+oc"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"6901273eb07ad8ec5dda512d","name":"Usuario Inicial","email":"teste_fluxo_1761683262@email.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEov_EHQND18G24Lch-pYCPRBOiPCEjy9mew"}} 
 </msg>
<msg time="2025-10-28T17:27:42.600619" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.472009" elapsed="0.128610"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.604752" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.604100" elapsed="0.000652"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.604752" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.604752" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.604752" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEov_EHQND18G24Lch-pYCPRBOiPCEjy9mew</msg>
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:42.604752" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="PASS" start="2025-10-28T17:27:42.604752" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:42.604752" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEov_EHQND18G24Lch-pYCPRBOiPCEjy9mew</msg>
<var>${token}</var>
<arg>${flow_email}</arg>
<arg>${NEW_USER_PASSWORD}</arg>
<doc>Realiza login e retorna o token JWT.</doc>
<status status="PASS" start="2025-10-28T17:27:42.472009" elapsed="0.132743"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.604752" level="INFO">Length is 171.</msg>
<arg>${token}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2025-10-28T17:27:42.604752" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.604752" level="INFO">${profile_headers} = {'Content-Type': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEo...</msg>
<var>${profile_headers}</var>
<arg>Content-Type=application/json</arg>
<arg>Authorization=Bearer ${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.604752" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.729023" level="INFO">GET Request : url=http://localhost:3000/api/v1/auth/me 
 path_url=/api/v1/auth/me 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEov_EHQND18G24Lch-pYCPRBOiPCEjy9mew'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:42.729023" level="INFO">GET Response : url=http://localhost:3000/api/v1/auth/me 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '140', 'ETag': 'W/"8c-vNuzaMC96XXgOH5a4zdaQ+bPpU8"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"6901273eb07ad8ec5dda512d","name":"Usuario Inicial","email":"teste_fluxo_1761683262@email.com","role":"user"}} 
 </msg>
<msg time="2025-10-28T17:27:42.729023" level="INFO">${profile_response} = &lt;Response [200]&gt;</msg>
<var>${profile_response}</var>
<arg>cinema_api</arg>
<arg>/auth/me</arg>
<arg>headers=${profile_headers}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.604752" elapsed="0.124271"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.730022" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${profile_response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.729023" elapsed="0.002000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${profile_response.json()}[data][email]</arg>
<arg>${flow_email}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.731023" elapsed="0.000517"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.732554" level="INFO">${update_body} = {'name': 'Usuário Fluxo Completo'}</msg>
<var>${update_body}</var>
<arg>name=${new_name}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.732554" elapsed="0.000000"/>
</kw>
<kw name="PUT On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.916528" level="INFO">PUT Request : url=http://localhost:3000/api/v1/auth/profile 
 path_url=/api/v1/auth/profile 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEov_EHQND18G24Lch-pYCPRBOiPCEjy9mew', 'Content-Length': '39'} 
 body=b'{"name": "Usu\\u00e1rio Fluxo Completo"}' 
 </msg>
<msg time="2025-10-28T17:27:42.916528" level="INFO">PUT Response : url=http://localhost:3000/api/v1/auth/profile 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '372', 'ETag': 'W/"174-IyyWNFtvffwUg5GAgJDOVN0AZ+c"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"message":"Perfil atualizado com sucesso","data":{"_id":"6901273eb07ad8ec5dda512d","name":"Usuário Fluxo Completo","email":"teste_fluxo_1761683262@email.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY5MDEyNzNlYjA3YWQ4ZWM1ZGRhNTEyZCIsImlhdCI6MTc2MTY4MzI2MiwiZXhwIjoxNzYxNzY5NjYyfQ.k4vBBEDoEov_EHQND18G24Lch-pYCPRBOiPCEjy9mew"}} 
 </msg>
<msg time="2025-10-28T17:27:42.916528" level="INFO">${update_response} = &lt;Response [200]&gt;</msg>
<var>${update_response}</var>
<arg>cinema_api</arg>
<arg>/auth/profile</arg>
<arg>json=${update_body}</arg>
<arg>headers=${profile_headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.732554" elapsed="0.183974"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.916528" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${update_response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.916528" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${update_response.json()}[data][name]</arg>
<arg>${new_name}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:42.916528" elapsed="0.004285"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.920813" level="INFO">Fluxo completo de autenticação executado com sucesso!</msg>
<arg>Fluxo completo de autenticação executado com sucesso!</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:42.920813" elapsed="0.000000"/>
</kw>
<doc>Testa fluxo completo: registro → login → perfil → update → CORRIGIDO</doc>
<status status="PASS" start="2025-10-28T17:27:42.281232" elapsed="0.639581"/>
</test>
<test id="s1-s1-t6" name="TC006 - Login com Credenciais do Raphael" line="96">
<kw name="Create API Session" owner="auth" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:42.920813" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${URL_API}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:42.920813" elapsed="0.000000"/>
</kw>
<doc>Cria a sessão de RequestsLibrary.</doc>
<status status="PASS" start="2025-10-28T17:27:42.920813" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.920813" level="INFO">${specific_email} = raphaelrates.dev@gmail.com</msg>
<var>${specific_email}</var>
<arg>raphaelrates.dev@gmail.com</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:42.920813" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.923428" level="INFO">${specific_password} = 12345678</msg>
<var>${specific_password}</var>
<arg>12345678</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:42.923428" elapsed="0.000000"/>
</kw>
<kw name="Perform Valid Login" owner="auth">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.923428" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.923428" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:42.923428" level="INFO">${body} = {'email': 'raphaelrates.dev@gmail.com', 'password': '12345678'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:42.923428" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:43.051124" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '63'} 
 body=b'{"email": "raphaelrates.dev@gmail.com", "password": "12345678"}' 
 </msg>
<msg time="2025-10-28T17:27:43.051124" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '319', 'ETag': 'W/"13f-EZip1bTduAYp0S3WR/tbMdTo08w"', 'Date': 'Tue, 28 Oct 2025 20:27:42 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"68fbbd1d5127a80a9600b456","name":"Raphael Susa Silva","email":"raphaelrates.dev@gmail.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZmJiZDFkNTEyN2E4MGE5NjAwYjQ1NiIsImlhdCI6MTc2MTY4MzI2MywiZXhwIjoxNzYxNzY5NjYzfQ.LY3TrMB9ad7uUZTwKOuKXB0CyVcHrVUKsDtJ5Rwa-3U"}} 
 </msg>
<msg time="2025-10-28T17:27:43.051124" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:42.923428" elapsed="0.127696"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.051124" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:43.051124" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.051124" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:43.051124" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.055387" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZmJiZDFkNTEyN2E4MGE5NjAwYjQ1NiIsImlhdCI6MTc2MTY4MzI2MywiZXhwIjoxNzYxNzY5NjYzfQ.LY3TrMB9ad7uUZTwKOuKXB0CyVcHrVUKsDtJ5Rwa-3U</msg>
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:43.051124" elapsed="0.004263"/>
</kw>
<return>
<value>${token}</value>
<status status="PASS" start="2025-10-28T17:27:43.055387" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:43.055387" level="INFO">${token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZmJiZDFkNTEyN2E4MGE5NjAwYjQ1NiIsImlhdCI6MTc2MTY4MzI2MywiZXhwIjoxNzYxNzY5NjYzfQ.LY3TrMB9ad7uUZTwKOuKXB0CyVcHrVUKsDtJ5Rwa-3U</msg>
<var>${token}</var>
<arg>${specific_email}</arg>
<arg>${specific_password}</arg>
<doc>Realiza login e retorna o token JWT.</doc>
<status status="PASS" start="2025-10-28T17:27:42.923428" elapsed="0.131959"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.055387" level="INFO">Length is 171.</msg>
<arg>${token}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2025-10-28T17:27:43.055387" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.055387" level="INFO">Login realizado com sucesso! Token obtido: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZmJiZDFkNTEyN2E4MGE5NjAwYjQ1NiIsImlhdCI6MTc2MTY4MzI2MywiZXhwIjoxNzYxNzY5NjYzfQ.LY3TrMB9ad7uUZTwKOuKXB0CyVcHrVUKsDtJ5Rwa-3U</msg>
<arg>Login realizado com sucesso! Token obtido: ${token}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:43.055387" elapsed="0.000000"/>
</kw>
<doc>Testa login com email: raphaelrates.dev@gmail.com e senha: 12345678</doc>
<status status="PASS" start="2025-10-28T17:27:42.920813" elapsed="0.134574"/>
</test>
<status status="PASS" start="2025-10-28T17:27:40.682905" elapsed="2.372482"/>
</suite>
<suite id="s1-s2" name="Movies" source="C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\tests\server\movies.robot">
<kw name="Setup API Session" owner="base" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:43.508335" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${BASE_URL}</arg>
<arg>verify=true</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:43.507334" elapsed="0.001001"/>
</kw>
<doc>Cria sessão da API</doc>
<status status="PASS" start="2025-10-28T17:27:43.505265" elapsed="0.003070"/>
</kw>
<test id="s1-s2-t1" name="TC007 - Get All Movies With Public Access" line="20">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:43.509342" level="INFO">Starting test: TC007 - Get All Movies With Public Access</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:43.509342" elapsed="0.000000"/>
</kw>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:43.510872" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:43.511879" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:43.510872" elapsed="0.001007"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.511879" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:43.511879" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:43.511879" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:43.511879" elapsed="0.001030"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:43.512909" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:43.512909" elapsed="0.000977"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:43.512909" elapsed="0.000977"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:43.513886" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:43.513886" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:43.638680" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?limit=10&amp;page=1 
 path_url=/api/v1/movies?limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:43.638680" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '4233', 'ETag': 'W/"1089-U/b2afFG9+yJ8XF/Ax9NfvbhlUw"', 'Date': 'Tue, 28 Oct 2025 20:27:43 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":10,"pagination":{"next":{"page":2,"limit":10}},"data":[{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","id":"68f7ec4a377d8700e8da0156"},{"_id":"68f7ec484bc189e5600e8f87","customId":"2","title":"The Avengers","synopsis":"Earth's mightiest heroes must come together to save the world.","director":"Joss Whedon","genres":["Action","Adventure"],"duration":143,"classification":"PG-13","poster":"avengers.jpg","releaseDate":"2012-05-04T00:00:00.000Z","id":"68f7ec484bc189e5600e8f87"},{"_id":"68f7ec484bc189e5600e8f86","customId":"1","title":"Inception","synopsis":"A thief who enters the dreams of others to steal their secrets.","director":"Christopher Nolan","genres":["Science Fiction","Action"],"duration":148,"classification":"PG-13","poster":"inception.jpg","releaseDate":"2010-07-16T00:00:00.000Z","id":"68f7ec484bc189e5600e8f86"},{"_id":"68f7ec4a377d8700e8da015a","customId":"14","title":"Avatar","synopsis":"A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.","director":"James Cameron","genres":["Action","Adventure","Fantasy"],"duration":162,"classification":"PG-13","poster":"avatar.jpg","releaseDate":"2009-12-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da015a"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"},{"_id":"68f7ec4a377d8700e8da0158","customId":"12","title":"The Lord of the Rings: The Fellowship of the Ring","synopsis":"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.","director":"Peter Jackson","genres":["Adventure","Fantasy","Drama"],"duration":178,"classification":"PG-13","poster":"lotr.jpg","releaseDate":"2001-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0158"},{"_id":"68f7ec4a377d8700e8da0157","customId":"11","title":"Gladiator","synopsis":"A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.","director":"Ridley Scott","genres":["Action","Adventure","Drama"],"duration":155,"classification":"R","poster":"gladiator.jpg","releaseDate":"2000-05-05T00:00:00.000Z","id":"68f7ec4a377d8700e8da0157"},{"_id":"68f7ec4a377d8700e8da0153","customId":"7","title":"Fight Club","synopsis":"An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.","director":"David Fincher","genres":["Drama"],"duration":139,"classification":"R","poster":"fightclub.jpg","releaseDate":"1999-10-15T00:00:00.000Z","id":"68f7ec4a377d8700e8da0153"},{"_id":"68f7ec4a377d8700e8da0150","customId":"4","title":"The Matrix","synopsis":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","director":"Lana Wachowski, Lilly Wachowski","genres":["Science Fiction","Action"],"duration":136,"classification":"R","poster":"matrix.jpg","releaseDate":"1999-03-31T00:00:00.000Z","id":"68f7ec4a377d8700e8da0150"},{"_id":"68f7ec4a377d8700e8da0159","customId":"13","title":"Titanic","synopsis":"A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.","director":"James Cameron","genres":["Drama","Romance"],"duration":194,"classification":"PG-13","poster":"titanic.jpg","releaseDate":"1997-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0159"}]} 
 </msg>
<msg time="2025-10-28T17:27:43.638680" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:43.513886" elapsed="0.124794"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:43.638680" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:43.638680" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<status status="PASS" start="2025-10-28T17:27:43.509342" elapsed="0.129338"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.640852" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:43.638680" elapsed="0.002172"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.640852" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:43.640852" elapsed="0.000000"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:43.638680" elapsed="0.002172"/>
</kw>
<kw name="Dictionary Should Contain Key" owner="Collections">
<arg>${response.json()}</arg>
<arg>data</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:43.640852" elapsed="0.000000"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.646836" level="INFO">Length is 10.</msg>
<arg>${response.json()}[data]</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2025-10-28T17:27:43.640852" elapsed="0.005984"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:43.648653" level="INFO">Número de filmes retornados: [{'_id': '68f7ec4a377d8700e8da0156', 'customId': '10', 'title': 'Interstellar', 'synopsis': "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.", 'director': 'Christopher Nolan', 'genres': ['Adventure', 'Drama', 'Science Fiction'], 'duration': 169, 'classification': 'PG-13', 'poster': 'interstellar.jpg', 'releaseDate': '2014-11-07T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0156'}, {'_id': '68f7ec484bc189e5600e8f87', 'customId': '2', 'title': 'The Avengers', 'synopsis': "Earth's mightiest heroes must come together to save the world.", 'director': 'Joss Whedon', 'genres': ['Action', 'Adventure'], 'duration': 143, 'classification': 'PG-13', 'poster': 'avengers.jpg', 'releaseDate': '2012-05-04T00:00:00.000Z', 'id': '68f7ec484bc189e5600e8f87'}, {'_id': '68f7ec484bc189e5600e8f86', 'customId': '1', 'title': 'Inception', 'synopsis': 'A thief who enters the dreams of others to steal their secrets.', 'director': 'Christopher Nolan', 'genres': ['Science Fiction', 'Action'], 'duration': 148, 'classification': 'PG-13', 'poster': 'inception.jpg', 'releaseDate': '2010-07-16T00:00:00.000Z', 'id': '68f7ec484bc189e5600e8f86'}, {'_id': '68f7ec4a377d8700e8da015a', 'customId': '14', 'title': 'Avatar', 'synopsis': 'A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.', 'director': 'James Cameron', 'genres': ['Action', 'Adventure', 'Fantasy'], 'duration': 162, 'classification': 'PG-13', 'poster': 'avatar.jpg', 'releaseDate': '2009-12-18T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da015a'}, {'_id': '68f7ec4a377d8700e8da0152', 'customId': '6', 'title': 'The Dark Knight', 'synopsis': 'When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.', 'director': 'Christopher Nolan', 'genres': ['Action', 'Crime', 'Drama'], 'duration': 152, 'classification': 'PG-13', 'poster': 'darkknight.jpg', 'releaseDate': '2008-07-18T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0152'}, {'_id': '68f7ec4a377d8700e8da0158', 'customId': '12', 'title': 'The Lord of the Rings: The Fellowship of the Ring', 'synopsis': 'A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.', 'director': 'Peter Jackson', 'genres': ['Adventure', 'Fantasy', 'Drama'], 'duration': 178, 'classification': 'PG-13', 'poster': 'lotr.jpg', 'releaseDate': '2001-12-19T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0158'}, {'_id': '68f7ec4a377d8700e8da0157', 'customId': '11', 'title': 'Gladiator', 'synopsis': 'A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.', 'director': 'Ridley Scott', 'genres': ['Action', 'Adventure', 'Drama'], 'duration': 155, 'classification': 'R', 'poster': 'gladiator.jpg', 'releaseDate': '2000-05-05T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0157'}, {'_id': '68f7ec4a377d8700e8da0153', 'customId': '7', 'title': 'Fight Club', 'synopsis': 'An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.', 'director': 'David Fincher', 'genres': ['Drama'], 'duration': 139, 'classification': 'R', 'poster': 'fightclub.jpg', 'releaseDate': '1999-10-15T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0153'}, {'_id': '68f7ec4a377d8700e8da0150', 'customId': '4', 'title': 'The Matrix', 'synopsis': 'A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.', 'director': 'Lana Wachowski, Lilly Wachowski', 'genres': ['Science Fiction', 'Action'], 'duration': 136, 'classification': 'R', 'poster': 'matrix.jpg', 'releaseDate': '1999-03-31T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0150'}, {'_id': '68f7ec4a377d8700e8da0159', 'customId': '13', 'title': 'Titanic', 'synopsis': 'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.', 'director': 'James Cameron', 'genres': ['Drama', 'Romance'], 'duration': 194, 'classification': 'PG-13', 'poster': 'titanic.jpg', 'releaseDate': '1997-12-19T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0159'}]</msg>
<arg>Número de filmes retornados: ${response.json()}[data]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:43.646836" elapsed="0.002353"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:43.649189" level="INFO">Finished test: TC007 - Get All Movies With Public Access</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:43.649189" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:43.684336" level="INFO">Starting Browser process C:\Users\raphael\anaconda3\Lib\site-packages\Browser\wrapper\index.js using at 127.0.0.1:57534</msg>
<doc>Listar todos os filmes com acesso público - CORRIGIDO</doc>
<tag>movies</tag>
<tag>public</tag>
<tag>read</tag>
<status status="PASS" start="2025-10-28T17:27:43.508335" elapsed="0.140854"/>
</test>
<test id="s1-s2-t2" name="TC008 - Get Movies With Title Filter" line="30">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:44.731102" level="INFO">Starting test: TC008 - Get Movies With Title Filter</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:44.731102" elapsed="0.000000"/>
</kw>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.731102" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:44.735892" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.731102" elapsed="0.004790"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:44.735892" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.735892" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.735892" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.735892" elapsed="0.001595"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.737487" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.737487" elapsed="0.001013"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.737487" elapsed="0.001013"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.738500" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.738500" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:44.861089" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?limit=10&amp;page=1 
 path_url=/api/v1/movies?limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:44.861089" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '4233', 'ETag': 'W/"1089-U/b2afFG9+yJ8XF/Ax9NfvbhlUw"', 'Date': 'Tue, 28 Oct 2025 20:27:44 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":10,"pagination":{"next":{"page":2,"limit":10}},"data":[{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","id":"68f7ec4a377d8700e8da0156"},{"_id":"68f7ec484bc189e5600e8f87","customId":"2","title":"The Avengers","synopsis":"Earth's mightiest heroes must come together to save the world.","director":"Joss Whedon","genres":["Action","Adventure"],"duration":143,"classification":"PG-13","poster":"avengers.jpg","releaseDate":"2012-05-04T00:00:00.000Z","id":"68f7ec484bc189e5600e8f87"},{"_id":"68f7ec484bc189e5600e8f86","customId":"1","title":"Inception","synopsis":"A thief who enters the dreams of others to steal their secrets.","director":"Christopher Nolan","genres":["Science Fiction","Action"],"duration":148,"classification":"PG-13","poster":"inception.jpg","releaseDate":"2010-07-16T00:00:00.000Z","id":"68f7ec484bc189e5600e8f86"},{"_id":"68f7ec4a377d8700e8da015a","customId":"14","title":"Avatar","synopsis":"A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.","director":"James Cameron","genres":["Action","Adventure","Fantasy"],"duration":162,"classification":"PG-13","poster":"avatar.jpg","releaseDate":"2009-12-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da015a"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"},{"_id":"68f7ec4a377d8700e8da0158","customId":"12","title":"The Lord of the Rings: The Fellowship of the Ring","synopsis":"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.","director":"Peter Jackson","genres":["Adventure","Fantasy","Drama"],"duration":178,"classification":"PG-13","poster":"lotr.jpg","releaseDate":"2001-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0158"},{"_id":"68f7ec4a377d8700e8da0157","customId":"11","title":"Gladiator","synopsis":"A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.","director":"Ridley Scott","genres":["Action","Adventure","Drama"],"duration":155,"classification":"R","poster":"gladiator.jpg","releaseDate":"2000-05-05T00:00:00.000Z","id":"68f7ec4a377d8700e8da0157"},{"_id":"68f7ec4a377d8700e8da0153","customId":"7","title":"Fight Club","synopsis":"An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.","director":"David Fincher","genres":["Drama"],"duration":139,"classification":"R","poster":"fightclub.jpg","releaseDate":"1999-10-15T00:00:00.000Z","id":"68f7ec4a377d8700e8da0153"},{"_id":"68f7ec4a377d8700e8da0150","customId":"4","title":"The Matrix","synopsis":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","director":"Lana Wachowski, Lilly Wachowski","genres":["Science Fiction","Action"],"duration":136,"classification":"R","poster":"matrix.jpg","releaseDate":"1999-03-31T00:00:00.000Z","id":"68f7ec4a377d8700e8da0150"},{"_id":"68f7ec4a377d8700e8da0159","customId":"13","title":"Titanic","synopsis":"A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.","director":"James Cameron","genres":["Drama","Romance"],"duration":194,"classification":"PG-13","poster":"titanic.jpg","releaseDate":"1997-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0159"}]} 
 </msg>
<msg time="2025-10-28T17:27:44.861089" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:44.738500" elapsed="0.122589"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:44.861089" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:44.861089" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<status status="PASS" start="2025-10-28T17:27:44.731102" elapsed="0.129987"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Run Keywords" owner="BuiltIn">
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:44.861089" level="INFO">Usando filmes existentes para teste de filtro</msg>
<arg>Usando filmes existentes para teste de filtro</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:44.861089" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:44.861089" level="FAIL">Variable '${first_movie_title}' not found.</msg>
<arg>Log</arg>
<arg>Usando filmes existentes para teste de filtro</arg>
<arg>AND</arg>
<arg>${first_movie_title}=</arg>
<arg>Set Variable</arg>
<arg>${response.json()}[data][0][title]</arg>
<arg>AND</arg>
<arg>${filter_response}=</arg>
<arg>Get All Movies</arg>
<arg>title=${first_movie_title}</arg>
<arg>AND</arg>
<arg>Should Be Success Response</arg>
<arg>${filter_response}</arg>
<arg>200</arg>
<arg>AND</arg>
<arg>Should Not Be Empty</arg>
<arg>${filter_response.json()}[data]</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<status status="FAIL" start="2025-10-28T17:27:44.861089" elapsed="0.000000">Variable '${first_movie_title}' not found.</status>
</kw>
<arg>len($response.json()['data']) &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Log</arg>
<arg>Usando filmes existentes para teste de filtro</arg>
<arg>AND</arg>
<arg>${first_movie_title}=</arg>
<arg>Set Variable</arg>
<arg>${response.json()}[data][0][title]</arg>
<arg>AND</arg>
<arg>${filter_response}=</arg>
<arg>Get All Movies</arg>
<arg>title=${first_movie_title}</arg>
<arg>AND</arg>
<arg>Should Be Success Response</arg>
<arg>${filter_response}</arg>
<arg>200</arg>
<arg>AND</arg>
<arg>Should Not Be Empty</arg>
<arg>${filter_response.json()}[data]</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Não há filmes para testar filtro, pulando verificação detalhada</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="FAIL" start="2025-10-28T17:27:44.861089" elapsed="0.000000">Variable '${first_movie_title}' not found.</status>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:44.861089" level="INFO">Finished test: TC008 - Get Movies With Title Filter</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:44.861089" elapsed="0.000000"/>
</kw>
<doc>Filtrar filmes por título - CORRIGIDO</doc>
<tag>filter</tag>
<tag>movies</tag>
<tag>read</tag>
<status status="FAIL" start="2025-10-28T17:27:44.728951" elapsed="0.132138">Variable '${first_movie_title}' not found.</status>
</test>
<test id="s1-s2-t3" name="TC010 - Get Movies With Pagination" line="45">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:44.878705" level="INFO">Starting test: TC010 - Get Movies With Pagination</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:44.878705" elapsed="0.000000"/>
</kw>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.879686" elapsed="0.001002"/>
</kw>
<msg time="2025-10-28T17:27:44.880688" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.879686" elapsed="0.001002"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:44.880688" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.880688" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.881201" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.881201" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.881201" elapsed="0.001004"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.882205" elapsed="0.000000"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.882205" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:44.883712" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:44.882205" elapsed="0.001507"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:45.006733" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?limit=5&amp;page=1 
 path_url=/api/v1/movies?limit=5&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:45.006733" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?limit=5&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2113', 'ETag': 'W/"841-47cxdEbq3Hbx8K0D090Ng3jdQ8k"', 'Date': 'Tue, 28 Oct 2025 20:27:45 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":5,"pagination":{"next":{"page":2,"limit":5}},"data":[{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","id":"68f7ec4a377d8700e8da0156"},{"_id":"68f7ec484bc189e5600e8f87","customId":"2","title":"The Avengers","synopsis":"Earth's mightiest heroes must come together to save the world.","director":"Joss Whedon","genres":["Action","Adventure"],"duration":143,"classification":"PG-13","poster":"avengers.jpg","releaseDate":"2012-05-04T00:00:00.000Z","id":"68f7ec484bc189e5600e8f87"},{"_id":"68f7ec484bc189e5600e8f86","customId":"1","title":"Inception","synopsis":"A thief who enters the dreams of others to steal their secrets.","director":"Christopher Nolan","genres":["Science Fiction","Action"],"duration":148,"classification":"PG-13","poster":"inception.jpg","releaseDate":"2010-07-16T00:00:00.000Z","id":"68f7ec484bc189e5600e8f86"},{"_id":"68f7ec4a377d8700e8da015a","customId":"14","title":"Avatar","synopsis":"A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.","director":"James Cameron","genres":["Action","Adventure","Fantasy"],"duration":162,"classification":"PG-13","poster":"avatar.jpg","releaseDate":"2009-12-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da015a"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"}]} 
 </msg>
<msg time="2025-10-28T17:27:45.006733" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:44.883712" elapsed="0.123021"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:45.006733" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:45.006733" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>limit=5</arg>
<arg>page=1</arg>
<status status="PASS" start="2025-10-28T17:27:44.878705" elapsed="0.128028"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.010590" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.006733" elapsed="0.003857"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.010590" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.010590" elapsed="0.000000"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:45.006733" elapsed="0.006957"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<kw name="Run Keywords" owner="BuiltIn">
<kw name="Dictionary Should Contain Key" owner="Collections">
<arg>${response.json()}</arg>
<arg>pagination</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.013690" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.013690" level="INFO">Paginação disponível: {'next': {'page': 2, 'limit': 5}}</msg>
<arg>Paginação disponível: ${response.json()}[pagination]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.013690" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.013690" level="INFO">Page: {'next': {'page': 2, 'limit': 5}}.get('page', 'N/A') - Limit: {'next': {'page': 2, 'limit': 5}}.get('limit', 'N/A')</msg>
<arg>Page: ${response.json()}[pagination].get('page', 'N/A') - Limit: ${response.json()}[pagination].get('limit', 'N/A')</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.013690" elapsed="0.000000"/>
</kw>
<arg>'pagination' in $response.json()</arg>
<arg>Log</arg>
<arg>Page: ${response.json()}[pagination].get('page', 'N/A') - Limit: ${response.json()}[pagination].get('limit', 'N/A')</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.013690" elapsed="0.000000"/>
</kw>
<arg>Dictionary Should Contain Key</arg>
<arg>${response.json()}</arg>
<arg>pagination</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>Paginação disponível: ${response.json()}[pagination]</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'pagination' in $response.json()</arg>
<arg>Log</arg>
<arg>Page: ${response.json()}[pagination].get('page', 'N/A') - Limit: ${response.json()}[pagination].get('limit', 'N/A')</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<status status="PASS" start="2025-10-28T17:27:45.013690" elapsed="0.006920"/>
</kw>
<arg>Run Keywords</arg>
<arg>Dictionary Should Contain Key</arg>
<arg>${response.json()}</arg>
<arg>pagination</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>Paginação disponível: ${response.json()}[pagination]</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'pagination' in $response.json()</arg>
<arg>Log</arg>
<arg>Page: ${response.json()}[pagination].get('page', 'N/A') - Limit: ${response.json()}[pagination].get('limit', 'N/A')</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="PASS" start="2025-10-28T17:27:45.013690" elapsed="0.006920"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:45.020610" level="INFO">Finished test: TC010 - Get Movies With Pagination</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.020610" elapsed="0.000000"/>
</kw>
<doc>Listar filmes com paginação - CORRIGIDO</doc>
<tag>movies</tag>
<tag>pagination</tag>
<tag>read</tag>
<status status="PASS" start="2025-10-28T17:27:44.873681" elapsed="0.146929"/>
</test>
<test id="s1-s2-t4" name="TC011 - Get Movies With Sorting" line="59">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:45.033139" level="INFO">Starting test: TC011 - Get Movies With Sorting</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.033139" elapsed="0.000586"/>
</kw>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.037538" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:45.037538" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.035521" elapsed="0.002017"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.038711" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.037538" elapsed="0.001173"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.038711" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.038711" elapsed="0.001191"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.040505" elapsed="0.000543"/>
</kw>
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.039902" elapsed="0.001146"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.041048" elapsed="0.001016"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.041048" elapsed="0.001016"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.042064" elapsed="0.000997"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.042064" elapsed="0.000997"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:45.166411" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?sort=title&amp;limit=10&amp;page=1 
 path_url=/api/v1/movies?sort=title&amp;limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:45.166411" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?sort=title&amp;limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '4233', 'ETag': 'W/"1089-U/b2afFG9+yJ8XF/Ax9NfvbhlUw"', 'Date': 'Tue, 28 Oct 2025 20:27:45 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":10,"pagination":{"next":{"page":2,"limit":10}},"data":[{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","id":"68f7ec4a377d8700e8da0156"},{"_id":"68f7ec484bc189e5600e8f87","customId":"2","title":"The Avengers","synopsis":"Earth's mightiest heroes must come together to save the world.","director":"Joss Whedon","genres":["Action","Adventure"],"duration":143,"classification":"PG-13","poster":"avengers.jpg","releaseDate":"2012-05-04T00:00:00.000Z","id":"68f7ec484bc189e5600e8f87"},{"_id":"68f7ec484bc189e5600e8f86","customId":"1","title":"Inception","synopsis":"A thief who enters the dreams of others to steal their secrets.","director":"Christopher Nolan","genres":["Science Fiction","Action"],"duration":148,"classification":"PG-13","poster":"inception.jpg","releaseDate":"2010-07-16T00:00:00.000Z","id":"68f7ec484bc189e5600e8f86"},{"_id":"68f7ec4a377d8700e8da015a","customId":"14","title":"Avatar","synopsis":"A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.","director":"James Cameron","genres":["Action","Adventure","Fantasy"],"duration":162,"classification":"PG-13","poster":"avatar.jpg","releaseDate":"2009-12-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da015a"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"},{"_id":"68f7ec4a377d8700e8da0158","customId":"12","title":"The Lord of the Rings: The Fellowship of the Ring","synopsis":"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.","director":"Peter Jackson","genres":["Adventure","Fantasy","Drama"],"duration":178,"classification":"PG-13","poster":"lotr.jpg","releaseDate":"2001-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0158"},{"_id":"68f7ec4a377d8700e8da0157","customId":"11","title":"Gladiator","synopsis":"A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.","director":"Ridley Scott","genres":["Action","Adventure","Drama"],"duration":155,"classification":"R","poster":"gladiator.jpg","releaseDate":"2000-05-05T00:00:00.000Z","id":"68f7ec4a377d8700e8da0157"},{"_id":"68f7ec4a377d8700e8da0153","customId":"7","title":"Fight Club","synopsis":"An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.","director":"David Fincher","genres":["Drama"],"duration":139,"classification":"R","poster":"fightclub.jpg","releaseDate":"1999-10-15T00:00:00.000Z","id":"68f7ec4a377d8700e8da0153"},{"_id":"68f7ec4a377d8700e8da0150","customId":"4","title":"The Matrix","synopsis":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","director":"Lana Wachowski, Lilly Wachowski","genres":["Science Fiction","Action"],"duration":136,"classification":"R","poster":"matrix.jpg","releaseDate":"1999-03-31T00:00:00.000Z","id":"68f7ec4a377d8700e8da0150"},{"_id":"68f7ec4a377d8700e8da0159","customId":"13","title":"Titanic","synopsis":"A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.","director":"James Cameron","genres":["Drama","Romance"],"duration":194,"classification":"PG-13","poster":"titanic.jpg","releaseDate":"1997-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0159"}]} 
 </msg>
<msg time="2025-10-28T17:27:45.166411" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:45.043061" elapsed="0.123350"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:45.166411" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:45.166411" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>sort=title</arg>
<status status="PASS" start="2025-10-28T17:27:45.034064" elapsed="0.132347"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.166411" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.166411" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.170788" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.166411" elapsed="0.004377"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:45.166411" elapsed="0.004377"/>
</kw>
<kw name="Create List" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.170788" level="INFO">${titles} = []</msg>
<var>${titles}</var>
<doc>Returns a list containing given items.</doc>
<status status="PASS" start="2025-10-28T17:27:45.170788" elapsed="0.000000"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da0156', 'customId': '10', 'title': 'Interstellar', 'synopsis': "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.", 'direc...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec484bc189e5600e8f87', 'customId': '2', 'title': 'The Avengers', 'synopsis': "Earth's mightiest heroes must come together to save the world.", 'director': 'Joss Whedon', 'genres': ['Actio...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec484bc189e5600e8f86', 'customId': '1', 'title': 'Inception', 'synopsis': 'A thief who enters the dreams of others to steal their secrets.', 'director': 'Christopher Nolan', 'genres': ['S...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da015a', 'customId': '14', 'title': 'Avatar', 'synopsis': 'A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders a...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da0152', 'customId': '6', 'title': 'The Dark Knight', 'synopsis': 'When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one ...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da0158', 'customId': '12', 'title': 'The Lord of the Rings: The Fellowship of the Ring', 'synopsis': 'A meek Hobbit from the Shire and eight companions set out on a journey ...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da0157', 'customId': '11', 'title': 'Gladiator', 'synopsis': 'A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da0153', 'customId': '7', 'title': 'Fight Club', 'synopsis': 'An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into some...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da0150', 'customId': '4', 'title': 'The Matrix', 'synopsis': 'A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war ag...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Append To List" owner="Collections">
<arg>${titles}</arg>
<arg>${movie}[title]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<var name="${movie}">{'_id': '68f7ec4a377d8700e8da0159', 'customId': '13', 'title': 'Titanic', 'synopsis': 'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. ...</var>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</iter>
<var>${movie}</var>
<value>@{response.json()}[data]</value>
<status status="PASS" start="2025-10-28T17:27:45.170788" elapsed="0.002594"/>
</for>
<kw name="Copy List" owner="Collections">
<msg time="2025-10-28T17:27:45.173382" level="INFO">${sorted_titles} = ['Interstellar', 'The Avengers', 'Inception', 'Avatar', 'The Dark Knight', 'The Lord of the Rings: The Fellowship of the Ring', 'Gladiator', 'Fight Club', 'The Matrix', 'Titanic']</msg>
<var>${sorted_titles}</var>
<arg>${titles}</arg>
<doc>Returns a copy of the given list.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<kw name="Sort List" owner="Collections">
<arg>${sorted_titles}</arg>
<doc>Sorts the given list in place.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.180393" level="INFO">Os filmes não estão ordenados por título. Ordem atual: ['Interstellar', 'The Avengers', 'Inception', 'Avatar', 'The Dark Knight', 'The Lord of the Rings: The Fellowship of the Ring', 'Gladiator', 'Fight Club', 'The Matrix', 'Titanic']</msg>
<arg>Os filmes não estão ordenados por título. Ordem atual: ${titles}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.007011"/>
</kw>
<arg>$titles != $sorted_titles</arg>
<arg>Log</arg>
<arg>Os filmes não estão ordenados por título. Ordem atual: ${titles}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Filmes ordenados por título corretamente</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.173382" elapsed="0.007011"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:45.181025" level="INFO">Finished test: TC011 - Get Movies With Sorting</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.180393" elapsed="0.000632"/>
</kw>
<doc>Listar filmes ordenados - CORRIGIDO</doc>
<tag>movies</tag>
<tag>read</tag>
<tag>sort</tag>
<status status="PASS" start="2025-10-28T17:27:45.027587" elapsed="0.153438"/>
</test>
<test id="s1-s2-t5" name="TC012 - Create Movie As Admin" line="79">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:45.190858" level="INFO">Starting test: TC012 - Create Movie As Admin</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.190858" elapsed="0.000000"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.194188" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.194188" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.195199" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.194188" elapsed="0.001011"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:45.256698" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:45.256698" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:45 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:45.256698" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:45.195199" elapsed="0.061499">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.256698" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.256698" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:45.256698" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:45.190858" elapsed="0.065840">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:45.256698" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:45.190858" elapsed="0.065840">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.260781" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${response}</var>
<arg>${token}</arg>
<arg>&amp;{movie_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.260781" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${response}</arg>
<arg>201</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.260781" elapsed="0.000000"/>
</kw>
<kw name="Verify Movie Data Structure" owner="movies">
<arg>${response.json()}[data]</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.260781" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][title]</arg>
<arg>${movie_data}[title]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.260781" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][director]</arg>
<arg>${movie_data}[director]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.260781" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:45.260781" level="INFO">Finished test: TC012 - Create Movie As Admin</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.260781" elapsed="0.000000"/>
</kw>
<doc>Criar novo filme como administrador</doc>
<tag>admin</tag>
<tag>create</tag>
<tag>movies</tag>
<status status="FAIL" start="2025-10-28T17:27:45.188955" elapsed="0.074711">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t6" name="TC013 - Create Movie With Invalid Data" line="91">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:45.272704" level="INFO">Starting test: TC013 - Create Movie With Invalid Data</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.271715" elapsed="0.000989"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.273705" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.273705" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.274700" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.273705" elapsed="0.000995"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:45.333618" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:45.333618" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:45 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:45.333618" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:45.274700" elapsed="0.058918">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:45.273705" elapsed="0.059913">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:45.272704" elapsed="0.060914">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<var>${body}</var>
<arg>title=Incomplete Movie</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</kw>
<kw name="Create Auth Headers" owner="base">
<var>${headers}</var>
<arg>${token}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=400</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${response}</arg>
<arg>400</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.333618" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:45.333618" level="INFO">Finished test: TC013 - Create Movie With Invalid Data</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.333618" elapsed="0.006422"/>
</kw>
<doc>Tentativa de criar filme com dados inválidos</doc>
<tag>admin</tag>
<tag>create</tag>
<tag>error</tag>
<tag>movies</tag>
<status status="FAIL" start="2025-10-28T17:27:45.263666" elapsed="0.076374">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t7" name="TC014 - Get Movie By Valid ID" line="103">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:45.348928" level="INFO">Starting test: TC014 - Get Movie By Valid ID</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.347930" elapsed="0.000998"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.349928" level="INFO">${movie_id} = 68f7ec4a377d8700e8da0156</msg>
<var>${movie_id}</var>
<arg>68f7ec4a377d8700e8da0156</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-10-28T17:27:45.348928" elapsed="0.001000"/>
</kw>
<kw name="Get Movie By ID" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.350929" elapsed="0.000503"/>
</kw>
<msg time="2025-10-28T17:27:45.351432" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.349928" elapsed="0.001504"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:45.770635" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies/68f7ec4a377d8700e8da0156 
 path_url=/api/v1/movies/68f7ec4a377d8700e8da0156 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:45.770635" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies/68f7ec4a377d8700e8da0156 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '223007', 'ETag': 'W/"3671f-Bf2CNTBIGH5fGHLJwOLCwSUMa/s"', 'Date': 'Tue, 28 Oct 2025 20:27:45 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","createdAt":"2025-10-21T20:25:46.386Z","__v":0,"updatedAt":"2025-10-21T20:25:46.393Z","sessions":[{"_id":"68f7ec4b377d8700e8da0195","movie":"68f7ec4a377d8700e8da0156","theater":"68f7ec484bc189e5600e8f8a","datetime":"2025-10-21T15:00:00.000Z","fullPrice":16,"halfPrice":9.5,"seats":[{"row":"A","number":1,"status":"available"},{"row":"A","number":2,"status":"available"},{"row":"A","number":3,"status":"available"},{"row":"A","number":4,"status":"available"},{"row":"A","number":5,"status":"available"},{"row":"A","number":6,"status":"available"},{"row":"A","number":7,"status":"available"},{"row":"A","number":8,"status":"available"},{"row":"A","number":9,"status":"available"},{"row":"A","number":10,"status":"available"},{"row":"A","number":11,"status":"available"},{"row":"A","number":12,"status":"available"},{"row":"A","number":13,"status":"available"},{"row":"A","number":14,"status":"available"},{"row":"A","number":15,"status":"available"},{"row":"B","number":1,"status":"available"},{"row":"B","number":2,"status":"available"},{"row":"B","number":3,"status":"available"},{"row":"B","number":4,"status":"available"},{"row":"B","number":5,"status":"available"},{"row":"B","number":6,"status":"available"},{"row":"B","number":7,"status":"available"},{"row":"B","number":8,"status":"available"},{"row":"B","number":9,"status":"available"},{"row":"B","number":10,"status":"available"},{"row":"B","number":11,"status":"available"},{"row":"B","number":12,"status":"available"},{"row":"B","number":13,"status":"available"},{"row":"B","number":14,"status":"available"},{"row":"B","number":15,"status":"available"},{"row":"C","number":1,"status":"available"},{"row":"C","number":2,"status":"available"},{"row":"C","number":3,"status":"available"},{"row":"C","number":4,"status":"available"},{"row":"C","number":5,"status":"available"},{"row":"C","number":6,"status":"available"},{"row":"C","number":7,"status":"available"},{"row":"C","number":8,"status":"available"},{"row":"C","number":9,"status":"available"},{"row":"C","number":10,"status":"available"},{"row":"C","number":11,"status":"available"},{"row":"C","number":12,"status":"available"},{"row":"C","number":13,"status":"available"},{"row":"C","number":14,"status":"available"},{"row":"C","number":15,"status":"available"},{"row":"D","number":1,"status":"available"},{"row":"D","number":2,"status":"available"},{"row":"D","number":3,"status":"available"},{"row":"D","number":4,"status":"available"},{"row":"D","number":5,"status":"available"},{"row":"D","number":6,"status":"available"},{"row":"D","number":7,"status":"available"},{"row":"D","number":8,"status":"available"},{"row":"D","number":9,"status":"available"},{"row":"D","number":10,"status":"available"},{"row":"D","number":11,"status":"available"},{"row":"D","number":12,"status":"available"},{"row":"D","number":13,"status":"available"},{"row":"D","number":14,"status":"available"},{"row":"D","number":15,"status":"available"},{"row":"E","number":1,"status":"available"},{"row":"E","number":2,"status":"available"},{"row":"E","number":3,"status":"available"},{"row":"E","number":4,"status":"available"},{"row":"E","number":5,"status":"available"},{"row":"E","number":6,"status":"available"},{"row":"E","number":7,"status":"available"},{"row":"E","number":8,"status":"available"},{"row":"E","number":9,"status":"available"},{"row":"E","number":10,"status":"available"},{"row":"E","number":11,"status":"available"},{"row":"E","number":12,"status":"available"},{"row":"E","number":13,"status":"available"},{"row":"E","number":14,"status":"available"},{"row":"E","number":15,"status":"available"},{"row":"F","number":1,"status":"available"},{"row":"F","number":2,"status":"available"},{"row":"F","number":3,"status":"available"},{"row":"F","number":4,"status":"available"},{"row":"F","number":5,"status":"available"},{"row":"F","number":6,"status":"available"},{"row":"F","number":7,"status":"available"},{"row":"F","number":8,"status":"available"},{"row":"F","number":9,"status":"available"},{"row":"F","number":10,"status":"available"},{"row":"F","number":11,"status":"available"},{"row":"F","number":12,"status":"available"},{"row":"F","number":13,"status":"available"},{"row":"F","number":14,"status":"available"},{"row":"F","number":15,"status":"available"},{"row":"G","number":1,"status":"available"},{"row":"G","number":2,"status":"available"},{"row":"G","number":3,"status":"available"},{"row":"G","number":4,"status":"available"},{"row":"G","number":5,"status":"available"},{"row":"G","number":6,"status":"available"},{"row":"G","number":7,"status":"available"},{"row":"G","number":8,"status":"available"},{"row":"G","number":9,"status":"available"},{"row":"G","number":10,"status":"available"},{"row":"G","number":11,"status":"available"},{"row":"G","number":12,"status":"available"},{"row":"G","number":13,"status":"available"},{"row":"G","number":14,"status":"available"},{"row":"G","number":15,"status":"available"},{"row":"H","number":1,"status":"available"},{"row":"H","number":2,"status":"available"},{"row":"H","number":3,"status":"available"},{"row":"H","number":4,"status":"available"},{"row":"H","number":5,"status":"available"},{"row":"H","number":6,"status":"available"},{"row":"H","number":7,"status":"available"},{"row":"H","number":8,"status":"available"},{"row":"H","number":9,"status":"available"},{"row":"H","number":10,"status":"available"},{"row":"H","number":11,"status":"available"},{"row":"H","number":12,"status":"available"},{"row":"H","number":13,"status":"available"},{"row":"H","number":14,"status":"available"},{"row":"H","number":15,"status":"available"}],"createdAt":"2025-10-21T20:25:47.275Z","__v":0,"updatedAt":"2025-10-21T20:25:48.663Z","id":"68f7ec4b377d8700e8da0195"},{"_id":"68f7ec4b377d8700e8da0196","movie":"68f7ec4a377d8700e8da0156","theater":"68f7ec484bc189e5600e8f8a","datetime":"2025-10-21T19:00:00.000Z","fullPrice":20,"halfPrice":9.5,"seats":[{"row":"A","number":1,"status":"available"},{"row":"A","number":2,"status":"available"},{"row":"A","number":3,"status":"available"},{"row":"A","number":4,"status":"available"},{"row":"A","number":5,"status":"available"},{"row":"A","number":6,"status":"available"},{"row":"A","number":7,"status":"available"},{"row":"A","number":8,"status":"available"},{"row":"A","number":9,"status":"available"},{"row":"A","number":10,"status":"available"},{"row":"A","number":11,"status":"available"},{"row":"A","number":12,"status":"available"},{"row":"A","number":13,"status":"available"},{"row":"A","number":14,"status":"available"},{"row":"A","number":15,"status":"available"},{"row":"B","number":1,"status":"available"},{"row":"B","number":2,"status":"available"},{"row":"B","number":3,"status":"available"},{"row":"B","number":4,"status":"available"},{"row":"B","number":5,"status":"available"},{"row":"B","number":6,"status":"available"},{"row":"B","number":7,"status":"available"},{"row":"B","number":8,"status":"available"},{"row":"B","number":9,"status":"available"},{"row":"B","number":10,"status":"available"},{"row":"B","number":11,"status":"available"},{"row":"B","number":12,"status":"available"},{"row":"B","number":13,"status":"available"},{"row":"B","number":14,"status":"available"},{"row":"B","number":15,"status":"available"},{"row":"C","number":1,"status":"available"},{"row":"C","number":2,"status":"available"},{"row":"C","number":3,"status":"available"},{"row":"C","number":4,"status":"available"},{"row":"C","number":5,"status":"available"},{"row":"C","number":6,"status":"available"},{"row":"C","number":7,"status":"available"},{"row":"C","number":8,"status":"available"},{"row":"C","number":9,"status":"available"},{"row":"C","number":10,"status":"available"},{"row":"C","number":11,"status":"available"},{"row":"C","number":12,"status":"available"},{"row":"C","number":13,"status":"available"},{"row":"C","number":14,"status":"available"},{"row":"C","number":15,"status":"available"},{"row":"D","number":1,"status":"available"},{"row":"D","number":2,"status":"available"},{"row":"D","number":3,"status":"available"},{"row":"D","number":4,"status":"available"},{"row":"D","number":5,"status":"available"},{"row":"D","number":6,"status":"available"},{"row":"D","number":7,"status":"available"},{"row":"D","number":8,"status":"available"},{"row":"D","number":9,"status":"available"},{"row":"D","number":10,"status":"available"},{"row":"D","number":11,"status":"available"},{"row":"D","number":12,"status":"available"},{"row":"D","number":13,"status":"available"},{"row":"D","number":14,"status":"available"},{"row":"D","number":15,"status":"available"},{"row":"E","number":1,"status":"available"},{"row":"E","number":2,"status":"available"},{"row":"E","number":3,"status":"available"},{"row":"E","number":4,"status":"available"},{"row":"E","number":5,"status":"available"},{"row":"E","number":6,"status":"available"},{"row":"E","number":7,"status":"available"},{"row":"E","number":8,"status":"available"},{"row":"E","number":9,"status":"available"},{"row":"E","number":10,"status":"available"},{"row":"E","number":11,"status":"available"},{"row":"E","number":12,"status":"available"},{"row":"E","number":13,"status":"available"},{"row":"E","number":14,"status":"available"},{"row":"E","number":15,"status":"available"},{"row":"F","number":1,"status":"available"},{"row":"F","number":2,"status":"available"},{"row":"F","number":3,"status":"available"},{"row":"F","number":4,"status":"available"},{"row":"F","number":5,"status":"available"},{"row":"F","number":6,"status":"available"},{"row":"F","number":7,"status":"available"},{"row":"F","number":8,"status":"available"},{"row"... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg time="2025-10-28T17:27:45.770635" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies/${movie_id}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:45.351432" elapsed="0.419203"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:45.770635" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:45.770635" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>${movie_id}</arg>
<status status="PASS" start="2025-10-28T17:27:45.349928" elapsed="0.420707"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.775456" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.772812" elapsed="0.002644"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.780669" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.775456" elapsed="0.005213"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:45.772812" elapsed="0.007857"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][_id]</arg>
<arg>${movie_id}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.780669" elapsed="0.005108"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][title]</arg>
<arg>Interstellar</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.786975" elapsed="0.005457"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][director]</arg>
<arg>Christopher Nolan</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.793369" elapsed="0.003996"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][classification]</arg>
<arg>PG-13</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:45.799378" elapsed="0.001639"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.808267" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[data][duration]</arg>
<arg>169</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2025-10-28T17:27:45.801017" elapsed="0.007250"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${response.json()}[data][genres]</arg>
<arg>Adventure</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-10-28T17:27:45.808267" elapsed="0.004252"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${response.json()}[data][genres]</arg>
<arg>Drama</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-10-28T17:27:45.813399" elapsed="0.003051"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${response.json()}[data][genres]</arg>
<arg>Science Fiction</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-10-28T17:27:45.817445" elapsed="0.005339"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${response.json()}[data][synopsis]</arg>
<arg>team of explorers travel through a wormhole</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-10-28T17:27:45.823689" elapsed="0.003463"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:45.827152" level="INFO">Finished test: TC014 - Get Movie By Valid ID</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.827152" elapsed="0.000000"/>
</kw>
<doc>Buscar filme por ID válido - CORRIGIDO</doc>
<tag>movies</tag>
<tag>read</tag>
<status status="PASS" start="2025-10-28T17:27:45.345928" elapsed="0.481224"/>
</test>
<test id="s1-s2-t8" name="TC015 - Get Movie By Invalid ID" line="126">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:45.838050" level="INFO">Starting test: TC015 - Get Movie By Invalid ID</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.838050" elapsed="0.000000"/>
</kw>
<kw name="Get Movie By ID" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Auth Headers" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.841743" level="INFO">${headers} = {'Content-Type': 'application/json', 'Authorization': 'Bearer expected_status=404'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<arg>Authorization=Bearer ${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.841743" elapsed="0.000000"/>
</kw>
<return>
<value>${headers}</value>
<status status="PASS" start="2025-10-28T17:27:45.841743" elapsed="0.000000"/>
</return>
<arg>${token}</arg>
<status status="PASS" start="2025-10-28T17:27:45.840976" elapsed="0.000767"/>
</kw>
<msg time="2025-10-28T17:27:45.841743" level="INFO">${headers} = {'Content-Type': 'application/json', 'Authorization': 'Bearer expected_status=404'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.839952" elapsed="0.001791"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:45.903727" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies/invalid_id_123 
 path_url=/api/v1/movies/invalid_id_123 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'Bearer expected_status=404'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:45.903727" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies/invalid_id_123 
 status=404, reason=Not Found 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '45', 'ETag': 'W/"2d-76yzoZ3aJF1oDN8vFKpqErDRmpM"', 'Date': 'Tue, 28 Oct 2025 20:27:45 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Movie not found"} 
 </msg>
<msg time="2025-10-28T17:27:45.903727" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/invalid_id_123</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies/${movie_id}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:45.841743" elapsed="0.063017">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/invalid_id_123</status>
</kw>
<return>
<value>${response}</value>
<status status="NOT RUN" start="2025-10-28T17:27:45.904760" elapsed="0.000000"/>
</return>
<var>${response}</var>
<arg>invalid_id_123</arg>
<arg>expected_status=404</arg>
<status status="FAIL" start="2025-10-28T17:27:45.838050" elapsed="0.066710">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/invalid_id_123</status>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${response}</arg>
<arg>"Movie not found"</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.905759" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:45.906755" level="INFO">Finished test: TC015 - Get Movie By Invalid ID</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.905759" elapsed="0.000996"/>
</kw>
<doc>Tentativa de buscar filme com ID inválido</doc>
<tag>error</tag>
<tag>movies</tag>
<tag>read</tag>
<status status="FAIL" start="2025-10-28T17:27:45.835051" elapsed="0.071704">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/invalid_id_123</status>
</test>
<test id="s1-s2-t9" name="TC016 - Get Non-Existent Movie" line="132">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:45.914233" level="INFO">Starting test: TC016 - Get Non-Existent Movie</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.914233" elapsed="0.000000"/>
</kw>
<kw name="Get Movie By ID" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Auth Headers" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.916332" level="INFO">${headers} = {'Content-Type': 'application/json', 'Authorization': 'Bearer expected_status=404'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<arg>Authorization=Bearer ${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.916332" elapsed="0.000000"/>
</kw>
<return>
<value>${headers}</value>
<status status="PASS" start="2025-10-28T17:27:45.916332" elapsed="0.001237"/>
</return>
<arg>${token}</arg>
<status status="PASS" start="2025-10-28T17:27:45.916332" elapsed="0.001237"/>
</kw>
<msg time="2025-10-28T17:27:45.917569" level="INFO">${headers} = {'Content-Type': 'application/json', 'Authorization': 'Bearer expected_status=404'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:45.915283" elapsed="0.002286"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:45.979462" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies/60d0fe4f53112398988a109cb 
 path_url=/api/v1/movies/60d0fe4f53112398988a109cb 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'Bearer expected_status=404'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:45.980967" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies/60d0fe4f53112398988a109cb 
 status=404, reason=Not Found 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '45', 'ETag': 'W/"2d-76yzoZ3aJF1oDN8vFKpqErDRmpM"', 'Date': 'Tue, 28 Oct 2025 20:27:45 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Movie not found"} 
 </msg>
<msg time="2025-10-28T17:27:45.980967" level="FAIL">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/60d0fe4f53112398988a109cb</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies/${movie_id}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:45.917971" elapsed="0.064005">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/60d0fe4f53112398988a109cb</status>
</kw>
<return>
<value>${response}</value>
<status status="NOT RUN" start="2025-10-28T17:27:45.981976" elapsed="0.000000"/>
</return>
<var>${response}</var>
<arg>60d0fe4f53112398988a109cb</arg>
<arg>expected_status=404</arg>
<status status="FAIL" start="2025-10-28T17:27:45.915283" elapsed="0.066693">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/60d0fe4f53112398988a109cb</status>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${response}</arg>
<arg>"Movie not found"</arg>
<status status="NOT RUN" start="2025-10-28T17:27:45.982973" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:45.983973" level="INFO">Finished test: TC016 - Get Non-Existent Movie</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.982973" elapsed="0.001000"/>
</kw>
<doc>Tentativa de buscar filme que não existe</doc>
<tag>error</tag>
<tag>movies</tag>
<tag>read</tag>
<status status="FAIL" start="2025-10-28T17:27:45.910681" elapsed="0.073292">HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/v1/movies/60d0fe4f53112398988a109cb</status>
</test>
<test id="s1-s2-t10" name="TC017 - Update Movie As Admin" line="138">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:45.993564" level="INFO">Starting test: TC017 - Update Movie As Admin</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:45.993564" elapsed="0.000000"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.995599" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.995599" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:45.996594" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:45.995599" elapsed="0.000995"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.060609" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.060609" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.060609" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:45.996594" elapsed="0.065112">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.061706" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.061706" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.061706" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:45.994597" elapsed="0.067109">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.061706" elapsed="0.000990"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:45.994597" elapsed="0.068099">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${create_response}</var>
<arg>${token}</arg>
<arg>&amp;{movie_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<kw name="Extract Movie ID From Response" owner="movies">
<var>${movie_id}</var>
<arg>${create_response}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${updated_title}</var>
<arg>Updated Movie Title</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<kw name="Update Movie" owner="movies">
<var>${response}</var>
<arg>${token}</arg>
<arg>${movie_id}</arg>
<arg>title=${updated_title}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][title]</arg>
<arg>${updated_title}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.062696" level="INFO">Finished test: TC017 - Update Movie As Admin</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.062696" elapsed="0.000000"/>
</kw>
<doc>Atualizar filme como administrador</doc>
<tag>admin</tag>
<tag>movies</tag>
<tag>update</tag>
<status status="FAIL" start="2025-10-28T17:27:45.985971" elapsed="0.076725">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t11" name="TC018 - Update Movie With Partial Data" line="151">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.074015" level="INFO">Starting test: TC018 - Update Movie With Partial Data</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.074015" elapsed="0.000000"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.077023" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.076017" elapsed="0.001006"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.077023" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.077023" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.139751" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.139751" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.139751" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:46.078020" elapsed="0.062750">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:46.075019" elapsed="0.065751">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:46.075019" elapsed="0.065751">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${create_response}</var>
<arg>${token}</arg>
<arg>&amp;{movie_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Extract Movie ID From Response" owner="movies">
<var>${movie_id}</var>
<arg>${create_response}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${new_director}</var>
<arg>New Director Name</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${new_duration}</var>
<arg>150</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Update Movie" owner="movies">
<var>${response}</var>
<arg>${token}</arg>
<arg>${movie_id}</arg>
<arg>director=${new_director}</arg>
<arg>duration=${new_duration}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][director]</arg>
<arg>${new_director}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[data][duration]</arg>
<arg>${new_duration}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.140770" level="INFO">Finished test: TC018 - Update Movie With Partial Data</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.140770" elapsed="0.000000"/>
</kw>
<doc>Atualizar apenas alguns campos do filme</doc>
<tag>admin</tag>
<tag>movies</tag>
<tag>update</tag>
<status status="FAIL" start="2025-10-28T17:27:46.071009" elapsed="0.074602">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t12" name="TC019 - Update Non-Existent Movie" line="166">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.153662" level="INFO">Starting test: TC019 - Update Non-Existent Movie</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.153662" elapsed="0.000000"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.155910" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.155910" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.155910" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.155910" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.220719" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.220719" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.222095" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:46.155910" elapsed="0.066185">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.222095" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.222095" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.222095" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:46.154668" elapsed="0.067427">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.222095" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:46.154668" elapsed="0.067427">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Update Movie" owner="movies">
<var>${response}</var>
<arg>${token}</arg>
<arg>60d0fe4f5311236168a109cb</arg>
<arg>title=New Title</arg>
<arg>expected_status=404</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.222095" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${response}</arg>
<arg>"Movie not found"</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.222095" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.222095" level="INFO">Finished test: TC019 - Update Non-Existent Movie</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.222095" elapsed="0.000000"/>
</kw>
<doc>Tentativa de atualizar filme que não existe</doc>
<tag>admin</tag>
<tag>error</tag>
<tag>movies</tag>
<tag>update</tag>
<status status="FAIL" start="2025-10-28T17:27:46.150635" elapsed="0.071460">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t13" name="TC020 - Delete Movie As Admin" line="173">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.233931" level="INFO">Starting test: TC020 - Delete Movie As Admin</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.232922" elapsed="0.001009"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.236774" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.235756" elapsed="0.001018"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.237694" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.236774" elapsed="0.000920"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.300775" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.300775" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.301280" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:46.237694" elapsed="0.063586">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.301280" elapsed="0.001008"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.302288" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.302288" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:46.234839" elapsed="0.067449">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.302288" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:46.234475" elapsed="0.067813">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.303293" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${create_response}</var>
<arg>${token}</arg>
<arg>&amp;{movie_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.303293" elapsed="0.000000"/>
</kw>
<kw name="Extract Movie ID From Response" owner="movies">
<var>${movie_id}</var>
<arg>${create_response}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.303293" elapsed="0.000000"/>
</kw>
<kw name="Delete Movie" owner="movies">
<var>${response}</var>
<arg>${token}</arg>
<arg>${movie_id}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.304294" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.304294" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.json()}[message]</arg>
<arg>Movie removed</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.304294" elapsed="0.000000"/>
</kw>
<kw name="Get Movie By ID" owner="movies">
<var>${get_response}</var>
<arg>${movie_id}</arg>
<arg>expected_status=404</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.305294" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${get_response}</arg>
<arg>"Movie not found"</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.305294" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.306294" level="INFO">Finished test: TC020 - Delete Movie As Admin</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.305294" elapsed="0.001000"/>
</kw>
<doc>Deletar filme como administrador</doc>
<tag>admin</tag>
<tag>delete</tag>
<tag>movies</tag>
<status status="FAIL" start="2025-10-28T17:27:46.230568" elapsed="0.075726">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t14" name="TC021 - Create Movie Without Admin Rights" line="189">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.314807" level="INFO">Starting test: TC021 - Create Movie Without Admin Rights</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.314807" elapsed="0.000000"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.316874" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.315872" elapsed="0.001002"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.316874" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.316874" elapsed="0.000510"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.380581" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.380581" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.380581" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:46.317384" elapsed="0.064667">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.382051" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.382051" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.382051" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:46.315872" elapsed="0.066179">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.383060" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:46.315872" elapsed="0.067188">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.383060" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${response}</var>
<arg>${token}</arg>
<arg>&amp;{movie_data}</arg>
<arg>expected_status=403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.383060" elapsed="0.001015"/>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${response}</arg>
<arg>403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.384075" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.384075" level="INFO">Finished test: TC021 - Create Movie Without Admin Rights</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.384075" elapsed="0.000000"/>
</kw>
<doc>Tentativa de criar filme sem ser admin</doc>
<tag>create</tag>
<tag>movies</tag>
<tag>security</tag>
<status status="FAIL" start="2025-10-28T17:27:46.311806" elapsed="0.073274">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t15" name="TC022 - Update Movie Without Admin Rights" line="197">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.392657" level="INFO">Starting test: TC022 - Update Movie Without Admin Rights</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.392657" elapsed="0.000000"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.394660" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.393661" elapsed="0.000999"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.394660" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.394660" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.458088" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.458088" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.458088" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:46.394660" elapsed="0.063428">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.458088" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.458088" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.458088" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:46.393661" elapsed="0.064427">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.458088" elapsed="0.000000"/>
</return>
<var>${admin_token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:46.393661" elapsed="0.064427">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Get User Token" owner="base">
<var>${user_token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.458088" elapsed="0.000000"/>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.460789" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${create_response}</var>
<arg>${admin_token}</arg>
<arg>&amp;{movie_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.460789" elapsed="0.000000"/>
</kw>
<kw name="Extract Movie ID From Response" owner="movies">
<var>${movie_id}</var>
<arg>${create_response}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.460789" elapsed="0.000000"/>
</kw>
<kw name="Update Movie" owner="movies">
<var>${response}</var>
<arg>${user_token}</arg>
<arg>${movie_id}</arg>
<arg>title=Unauthorized Update</arg>
<arg>expected_status=403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.460789" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${response}</arg>
<arg>403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.460789" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.460789" level="INFO">Finished test: TC022 - Update Movie Without Admin Rights</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.460789" elapsed="0.000000"/>
</kw>
<doc>Tentativa de atualizar filme sem ser admin</doc>
<tag>movies</tag>
<tag>security</tag>
<tag>update</tag>
<status status="FAIL" start="2025-10-28T17:27:46.389142" elapsed="0.071647">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t16" name="TC023 - Delete Movie Without Admin Rights" line="210">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.472038" level="INFO">Starting test: TC023 - Delete Movie Without Admin Rights</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.471161" elapsed="0.000877"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.473947" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.473947" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.473947" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.473947" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.534453" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.534453" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.534453" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:46.473947" elapsed="0.060506">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.534453" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.534453" elapsed="0.003856"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.538309" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:46.473947" elapsed="0.064362">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.538309" elapsed="0.000000"/>
</return>
<var>${admin_token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:46.472038" elapsed="0.066271">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Get User Token" owner="base">
<var>${user_token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.538309" elapsed="0.000000"/>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.538309" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${create_response}</var>
<arg>${admin_token}</arg>
<arg>&amp;{movie_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.538309" elapsed="0.000000"/>
</kw>
<kw name="Extract Movie ID From Response" owner="movies">
<var>${movie_id}</var>
<arg>${create_response}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.538309" elapsed="0.000000"/>
</kw>
<kw name="Delete Movie" owner="movies">
<var>${response}</var>
<arg>${user_token}</arg>
<arg>${movie_id}</arg>
<arg>expected_status=403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.538309" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${response}</arg>
<arg>403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.540816" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.541416" level="INFO">Finished test: TC023 - Delete Movie Without Admin Rights</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.540816" elapsed="0.000600"/>
</kw>
<doc>Tentativa de deletar filme sem ser admin</doc>
<tag>delete</tag>
<tag>movies</tag>
<tag>security</tag>
<status status="FAIL" start="2025-10-28T17:27:46.468210" elapsed="0.073206">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t17" name="TC024 - Complete Movie CRUD Flow" line="223">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.548824" level="INFO">Starting test: TC024 - Complete Movie CRUD Flow</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.548824" elapsed="0.000000"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.551320" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.551320" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.551320" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.551320" elapsed="0.001005"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.619061" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:46.619061" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:46.619061" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:46.552325" elapsed="0.066736">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.619061" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.619061" elapsed="0.001508"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.620569" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:46.550815" elapsed="0.069754">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:46.620569" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:46.549818" elapsed="0.070751">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Create Sample Movie Data" owner="movies">
<var>${movie_data}</var>
<arg>99</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.620569" elapsed="0.000000"/>
</kw>
<kw name="Create Movie" owner="movies">
<var>${create_response}</var>
<arg>${token}</arg>
<arg>&amp;{movie_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.621582" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${create_response}</arg>
<arg>201</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.621582" elapsed="0.000000"/>
</kw>
<kw name="Extract Movie ID From Response" owner="movies">
<var>${movie_id}</var>
<arg>${create_response}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.621582" elapsed="0.000000"/>
</kw>
<kw name="Get Movie By ID" owner="movies">
<var>${get_response}</var>
<arg>${movie_id}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.622581" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${get_response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.622581" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${get_response}[data][title]</arg>
<arg>${movie_data}[title]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.622581" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<var>${updated_data}</var>
<arg>title=Updated Title</arg>
<arg>synopsis=Updated Synopsis</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.623606" elapsed="0.000000"/>
</kw>
<kw name="Update Movie" owner="movies">
<var>${update_response}</var>
<arg>${token}</arg>
<arg>${movie_id}</arg>
<arg>&amp;{updated_data}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.623606" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${update_response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.623606" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${update_response}[data][title]</arg>
<arg>Updated Title</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:46.623606" elapsed="0.000000"/>
</kw>
<kw name="Delete Movie" owner="movies">
<var>${delete_response}</var>
<arg>${token}</arg>
<arg>${movie_id}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.624602" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${delete_response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.624602" elapsed="0.000000"/>
</kw>
<kw name="Get Movie By ID" owner="movies">
<var>${verify_response}</var>
<arg>${movie_id}</arg>
<arg>expected_status=404</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.624602" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response Message" owner="base">
<arg>${verify_response}</arg>
<arg>404</arg>
<status status="NOT RUN" start="2025-10-28T17:27:46.624602" elapsed="0.000974"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.625576" level="INFO">Finished test: TC024 - Complete Movie CRUD Flow</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.625576" elapsed="0.000000"/>
</kw>
<doc>Fluxo completo CRUD para filmes</doc>
<tag>admin</tag>
<tag>crud</tag>
<tag>movies</tag>
<tag>smoke</tag>
<status status="FAIL" start="2025-10-28T17:27:46.541416" elapsed="0.084160">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s2-t18" name="TC025 - Get Movies Without Authentication" line="255">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.634812" level="INFO">Starting test: TC025 - Get Movies Without Authentication</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.634812" elapsed="0.000000"/>
</kw>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.636825" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:46.636825" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.635809" elapsed="0.001016"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.637813" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.636825" elapsed="0.000988"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.637813" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.637813" elapsed="0.000993"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.638806" elapsed="0.001010"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.639816" elapsed="0.000987"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.639816" elapsed="0.000987"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.640803" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.640803" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.763601" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?limit=10&amp;page=1 
 path_url=/api/v1/movies?limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:46.763601" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '4233', 'ETag': 'W/"1089-U/b2afFG9+yJ8XF/Ax9NfvbhlUw"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":10,"pagination":{"next":{"page":2,"limit":10}},"data":[{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","id":"68f7ec4a377d8700e8da0156"},{"_id":"68f7ec484bc189e5600e8f87","customId":"2","title":"The Avengers","synopsis":"Earth's mightiest heroes must come together to save the world.","director":"Joss Whedon","genres":["Action","Adventure"],"duration":143,"classification":"PG-13","poster":"avengers.jpg","releaseDate":"2012-05-04T00:00:00.000Z","id":"68f7ec484bc189e5600e8f87"},{"_id":"68f7ec484bc189e5600e8f86","customId":"1","title":"Inception","synopsis":"A thief who enters the dreams of others to steal their secrets.","director":"Christopher Nolan","genres":["Science Fiction","Action"],"duration":148,"classification":"PG-13","poster":"inception.jpg","releaseDate":"2010-07-16T00:00:00.000Z","id":"68f7ec484bc189e5600e8f86"},{"_id":"68f7ec4a377d8700e8da015a","customId":"14","title":"Avatar","synopsis":"A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.","director":"James Cameron","genres":["Action","Adventure","Fantasy"],"duration":162,"classification":"PG-13","poster":"avatar.jpg","releaseDate":"2009-12-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da015a"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"},{"_id":"68f7ec4a377d8700e8da0158","customId":"12","title":"The Lord of the Rings: The Fellowship of the Ring","synopsis":"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.","director":"Peter Jackson","genres":["Adventure","Fantasy","Drama"],"duration":178,"classification":"PG-13","poster":"lotr.jpg","releaseDate":"2001-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0158"},{"_id":"68f7ec4a377d8700e8da0157","customId":"11","title":"Gladiator","synopsis":"A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.","director":"Ridley Scott","genres":["Action","Adventure","Drama"],"duration":155,"classification":"R","poster":"gladiator.jpg","releaseDate":"2000-05-05T00:00:00.000Z","id":"68f7ec4a377d8700e8da0157"},{"_id":"68f7ec4a377d8700e8da0153","customId":"7","title":"Fight Club","synopsis":"An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.","director":"David Fincher","genres":["Drama"],"duration":139,"classification":"R","poster":"fightclub.jpg","releaseDate":"1999-10-15T00:00:00.000Z","id":"68f7ec4a377d8700e8da0153"},{"_id":"68f7ec4a377d8700e8da0150","customId":"4","title":"The Matrix","synopsis":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","director":"Lana Wachowski, Lilly Wachowski","genres":["Science Fiction","Action"],"duration":136,"classification":"R","poster":"matrix.jpg","releaseDate":"1999-03-31T00:00:00.000Z","id":"68f7ec4a377d8700e8da0150"},{"_id":"68f7ec4a377d8700e8da0159","customId":"13","title":"Titanic","synopsis":"A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.","director":"James Cameron","genres":["Drama","Romance"],"duration":194,"classification":"PG-13","poster":"titanic.jpg","releaseDate":"1997-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0159"}]} 
 </msg>
<msg time="2025-10-28T17:27:46.763601" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:46.640803" elapsed="0.122798"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:46.763601" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:46.763601" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<status status="PASS" start="2025-10-28T17:27:46.635809" elapsed="0.127792"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.770553" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:46.763601" elapsed="0.006952"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.770553" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:46.770553" elapsed="0.000000"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:46.763601" elapsed="0.006952"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${response.json()}</arg>
<arg>data</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-10-28T17:27:46.770553" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.770553" level="INFO">Finished test: TC025 - Get Movies Without Authentication</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.770553" elapsed="0.000000"/>
</kw>
<doc>Acesso público aos filmes sem autenticação</doc>
<tag>movies</tag>
<tag>public</tag>
<tag>read</tag>
<status status="PASS" start="2025-10-28T17:27:46.630670" elapsed="0.139883"/>
</test>
<test id="s1-s2-t19" name="TC026 - Search Movies By Partial Title" line="262">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.783107" level="INFO">Starting test: TC026 - Search Movies By Partial Title</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.783107" elapsed="0.000000"/>
</kw>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786398" elapsed="0.000508"/>
</kw>
<msg time="2025-10-28T17:27:46.786906" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.785446" elapsed="0.001460"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.786906" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:46.909848" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?title=the&amp;limit=10&amp;page=1 
 path_url=/api/v1/movies?title=the&amp;limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:46.909848" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?title=the&amp;limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '4233', 'ETag': 'W/"1089-U/b2afFG9+yJ8XF/Ax9NfvbhlUw"', 'Date': 'Tue, 28 Oct 2025 20:27:46 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":10,"pagination":{"next":{"page":2,"limit":10}},"data":[{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","id":"68f7ec4a377d8700e8da0156"},{"_id":"68f7ec484bc189e5600e8f87","customId":"2","title":"The Avengers","synopsis":"Earth's mightiest heroes must come together to save the world.","director":"Joss Whedon","genres":["Action","Adventure"],"duration":143,"classification":"PG-13","poster":"avengers.jpg","releaseDate":"2012-05-04T00:00:00.000Z","id":"68f7ec484bc189e5600e8f87"},{"_id":"68f7ec484bc189e5600e8f86","customId":"1","title":"Inception","synopsis":"A thief who enters the dreams of others to steal their secrets.","director":"Christopher Nolan","genres":["Science Fiction","Action"],"duration":148,"classification":"PG-13","poster":"inception.jpg","releaseDate":"2010-07-16T00:00:00.000Z","id":"68f7ec484bc189e5600e8f86"},{"_id":"68f7ec4a377d8700e8da015a","customId":"14","title":"Avatar","synopsis":"A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.","director":"James Cameron","genres":["Action","Adventure","Fantasy"],"duration":162,"classification":"PG-13","poster":"avatar.jpg","releaseDate":"2009-12-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da015a"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"},{"_id":"68f7ec4a377d8700e8da0158","customId":"12","title":"The Lord of the Rings: The Fellowship of the Ring","synopsis":"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.","director":"Peter Jackson","genres":["Adventure","Fantasy","Drama"],"duration":178,"classification":"PG-13","poster":"lotr.jpg","releaseDate":"2001-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0158"},{"_id":"68f7ec4a377d8700e8da0157","customId":"11","title":"Gladiator","synopsis":"A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.","director":"Ridley Scott","genres":["Action","Adventure","Drama"],"duration":155,"classification":"R","poster":"gladiator.jpg","releaseDate":"2000-05-05T00:00:00.000Z","id":"68f7ec4a377d8700e8da0157"},{"_id":"68f7ec4a377d8700e8da0153","customId":"7","title":"Fight Club","synopsis":"An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.","director":"David Fincher","genres":["Drama"],"duration":139,"classification":"R","poster":"fightclub.jpg","releaseDate":"1999-10-15T00:00:00.000Z","id":"68f7ec4a377d8700e8da0153"},{"_id":"68f7ec4a377d8700e8da0150","customId":"4","title":"The Matrix","synopsis":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","director":"Lana Wachowski, Lilly Wachowski","genres":["Science Fiction","Action"],"duration":136,"classification":"R","poster":"matrix.jpg","releaseDate":"1999-03-31T00:00:00.000Z","id":"68f7ec4a377d8700e8da0150"},{"_id":"68f7ec4a377d8700e8da0159","customId":"13","title":"Titanic","synopsis":"A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.","director":"James Cameron","genres":["Drama","Romance"],"duration":194,"classification":"PG-13","poster":"titanic.jpg","releaseDate":"1997-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0159"}]} 
 </msg>
<msg time="2025-10-28T17:27:46.910849" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:46.786906" elapsed="0.123943"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:46.910849" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:46.910849" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>title=the</arg>
<status status="PASS" start="2025-10-28T17:27:46.784433" elapsed="0.126939"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.913374" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:46.912374" elapsed="0.001000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.914375" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:46.913374" elapsed="0.002009"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:46.911372" elapsed="0.004011"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.916374" level="INFO">Filmes encontrados com 'the': [{'_id': '68f7ec4a377d8700e8da0156', 'customId': '10', 'title': 'Interstellar', 'synopsis': "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.", 'director': 'Christopher Nolan', 'genres': ['Adventure', 'Drama', 'Science Fiction'], 'duration': 169, 'classification': 'PG-13', 'poster': 'interstellar.jpg', 'releaseDate': '2014-11-07T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0156'}, {'_id': '68f7ec484bc189e5600e8f87', 'customId': '2', 'title': 'The Avengers', 'synopsis': "Earth's mightiest heroes must come together to save the world.", 'director': 'Joss Whedon', 'genres': ['Action', 'Adventure'], 'duration': 143, 'classification': 'PG-13', 'poster': 'avengers.jpg', 'releaseDate': '2012-05-04T00:00:00.000Z', 'id': '68f7ec484bc189e5600e8f87'}, {'_id': '68f7ec484bc189e5600e8f86', 'customId': '1', 'title': 'Inception', 'synopsis': 'A thief who enters the dreams of others to steal their secrets.', 'director': 'Christopher Nolan', 'genres': ['Science Fiction', 'Action'], 'duration': 148, 'classification': 'PG-13', 'poster': 'inception.jpg', 'releaseDate': '2010-07-16T00:00:00.000Z', 'id': '68f7ec484bc189e5600e8f86'}, {'_id': '68f7ec4a377d8700e8da015a', 'customId': '14', 'title': 'Avatar', 'synopsis': 'A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.', 'director': 'James Cameron', 'genres': ['Action', 'Adventure', 'Fantasy'], 'duration': 162, 'classification': 'PG-13', 'poster': 'avatar.jpg', 'releaseDate': '2009-12-18T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da015a'}, {'_id': '68f7ec4a377d8700e8da0152', 'customId': '6', 'title': 'The Dark Knight', 'synopsis': 'When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.', 'director': 'Christopher Nolan', 'genres': ['Action', 'Crime', 'Drama'], 'duration': 152, 'classification': 'PG-13', 'poster': 'darkknight.jpg', 'releaseDate': '2008-07-18T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0152'}, {'_id': '68f7ec4a377d8700e8da0158', 'customId': '12', 'title': 'The Lord of the Rings: The Fellowship of the Ring', 'synopsis': 'A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.', 'director': 'Peter Jackson', 'genres': ['Adventure', 'Fantasy', 'Drama'], 'duration': 178, 'classification': 'PG-13', 'poster': 'lotr.jpg', 'releaseDate': '2001-12-19T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0158'}, {'_id': '68f7ec4a377d8700e8da0157', 'customId': '11', 'title': 'Gladiator', 'synopsis': 'A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.', 'director': 'Ridley Scott', 'genres': ['Action', 'Adventure', 'Drama'], 'duration': 155, 'classification': 'R', 'poster': 'gladiator.jpg', 'releaseDate': '2000-05-05T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0157'}, {'_id': '68f7ec4a377d8700e8da0153', 'customId': '7', 'title': 'Fight Club', 'synopsis': 'An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.', 'director': 'David Fincher', 'genres': ['Drama'], 'duration': 139, 'classification': 'R', 'poster': 'fightclub.jpg', 'releaseDate': '1999-10-15T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0153'}, {'_id': '68f7ec4a377d8700e8da0150', 'customId': '4', 'title': 'The Matrix', 'synopsis': 'A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.', 'director': 'Lana Wachowski, Lilly Wachowski', 'genres': ['Science Fiction', 'Action'], 'duration': 136, 'classification': 'R', 'poster': 'matrix.jpg', 'releaseDate': '1999-03-31T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0150'}, {'_id': '68f7ec4a377d8700e8da0159', 'customId': '13', 'title': 'Titanic', 'synopsis': 'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.', 'director': 'James Cameron', 'genres': ['Drama', 'Romance'], 'duration': 194, 'classification': 'PG-13', 'poster': 'titanic.jpg', 'releaseDate': '1997-12-19T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0159'}]</msg>
<arg>Filmes encontrados com 'the': ${response.json()}[data]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.915383" elapsed="0.000991"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:46.917377" level="INFO">Finished test: TC026 - Search Movies By Partial Title</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.917377" elapsed="0.000000"/>
</kw>
<doc>Buscar filmes por parte do título</doc>
<tag>movies</tag>
<tag>read</tag>
<tag>search</tag>
<status status="PASS" start="2025-10-28T17:27:46.780171" elapsed="0.137206"/>
</test>
<test id="s1-s2-t20" name="TC027 - Filter Movies By Multiple Genres" line="269">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:46.925917" level="INFO">Starting test: TC027 - Filter Movies By Multiple Genres</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:46.924916" elapsed="0.001001"/>
</kw>
<kw name="Create List" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.926916" level="INFO">${genres} = ['Action', 'Drama', 'Comedy']</msg>
<var>${genres}</var>
<arg>Action</arg>
<arg>Drama</arg>
<arg>Comedy</arg>
<doc>Returns a list containing given items.</doc>
<status status="PASS" start="2025-10-28T17:27:46.925917" elapsed="0.000999"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.927915" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:46.927915" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.927915" elapsed="0.001000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:46.928915" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.928915" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.928915" elapsed="0.001001"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.930927" elapsed="0.000508"/>
</kw>
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.929916" elapsed="0.001519"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.931435" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.932441" elapsed="0.000000"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.931435" elapsed="0.001006"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:46.933444" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:46.932441" elapsed="0.001003"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.050975" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?genre=Action&amp;limit=10&amp;page=1 
 path_url=/api/v1/movies?genre=Action&amp;limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:47.050975" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?genre=Action&amp;limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2524', 'ETag': 'W/"9dc-jOyRzbML1i10iee8t7aiCg/RBpI"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":6,"pagination":{},"data":[{"_id":"68f7ec484bc189e5600e8f87","customId":"2","title":"The Avengers","synopsis":"Earth's mightiest heroes must come together to save the world.","director":"Joss Whedon","genres":["Action","Adventure"],"duration":143,"classification":"PG-13","poster":"avengers.jpg","releaseDate":"2012-05-04T00:00:00.000Z","id":"68f7ec484bc189e5600e8f87"},{"_id":"68f7ec484bc189e5600e8f86","customId":"1","title":"Inception","synopsis":"A thief who enters the dreams of others to steal their secrets.","director":"Christopher Nolan","genres":["Science Fiction","Action"],"duration":148,"classification":"PG-13","poster":"inception.jpg","releaseDate":"2010-07-16T00:00:00.000Z","id":"68f7ec484bc189e5600e8f86"},{"_id":"68f7ec4a377d8700e8da015a","customId":"14","title":"Avatar","synopsis":"A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.","director":"James Cameron","genres":["Action","Adventure","Fantasy"],"duration":162,"classification":"PG-13","poster":"avatar.jpg","releaseDate":"2009-12-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da015a"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"},{"_id":"68f7ec4a377d8700e8da0157","customId":"11","title":"Gladiator","synopsis":"A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.","director":"Ridley Scott","genres":["Action","Adventure","Drama"],"duration":155,"classification":"R","poster":"gladiator.jpg","releaseDate":"2000-05-05T00:00:00.000Z","id":"68f7ec4a377d8700e8da0157"},{"_id":"68f7ec4a377d8700e8da0150","customId":"4","title":"The Matrix","synopsis":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","director":"Lana Wachowski, Lilly Wachowski","genres":["Science Fiction","Action"],"duration":136,"classification":"R","poster":"matrix.jpg","releaseDate":"1999-03-31T00:00:00.000Z","id":"68f7ec4a377d8700e8da0150"}]} 
 </msg>
<msg time="2025-10-28T17:27:47.055280" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:46.933444" elapsed="0.121836"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:47.055280" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:47.055280" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>genre=${genre}</arg>
<status status="PASS" start="2025-10-28T17:27:46.926916" elapsed="0.128364"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.055280" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:47.055280" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.055280" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:47.055280" elapsed="0.000000"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:47.055280" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.060777" level="INFO">Gênero Action: [{'_id': '68f7ec484bc189e5600e8f87', 'customId': '2', 'title': 'The Avengers', 'synopsis': "Earth's mightiest heroes must come together to save the world.", 'director': 'Joss Whedon', 'genres': ['Action', 'Adventure'], 'duration': 143, 'classification': 'PG-13', 'poster': 'avengers.jpg', 'releaseDate': '2012-05-04T00:00:00.000Z', 'id': '68f7ec484bc189e5600e8f87'}, {'_id': '68f7ec484bc189e5600e8f86', 'customId': '1', 'title': 'Inception', 'synopsis': 'A thief who enters the dreams of others to steal their secrets.', 'director': 'Christopher Nolan', 'genres': ['Science Fiction', 'Action'], 'duration': 148, 'classification': 'PG-13', 'poster': 'inception.jpg', 'releaseDate': '2010-07-16T00:00:00.000Z', 'id': '68f7ec484bc189e5600e8f86'}, {'_id': '68f7ec4a377d8700e8da015a', 'customId': '14', 'title': 'Avatar', 'synopsis': 'A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.', 'director': 'James Cameron', 'genres': ['Action', 'Adventure', 'Fantasy'], 'duration': 162, 'classification': 'PG-13', 'poster': 'avatar.jpg', 'releaseDate': '2009-12-18T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da015a'}, {'_id': '68f7ec4a377d8700e8da0152', 'customId': '6', 'title': 'The Dark Knight', 'synopsis': 'When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.', 'director': 'Christopher Nolan', 'genres': ['Action', 'Crime', 'Drama'], 'duration': 152, 'classification': 'PG-13', 'poster': 'darkknight.jpg', 'releaseDate': '2008-07-18T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0152'}, {'_id': '68f7ec4a377d8700e8da0157', 'customId': '11', 'title': 'Gladiator', 'synopsis': 'A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.', 'director': 'Ridley Scott', 'genres': ['Action', 'Adventure', 'Drama'], 'duration': 155, 'classification': 'R', 'poster': 'gladiator.jpg', 'releaseDate': '2000-05-05T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0157'}, {'_id': '68f7ec4a377d8700e8da0150', 'customId': '4', 'title': 'The Matrix', 'synopsis': 'A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.', 'director': 'Lana Wachowski, Lilly Wachowski', 'genres': ['Science Fiction', 'Action'], 'duration': 136, 'classification': 'R', 'poster': 'matrix.jpg', 'releaseDate': '1999-03-31T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0150'}]</msg>
<arg>Gênero ${genre}: ${response.json()}[data]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.055280" elapsed="0.005497"/>
</kw>
<var name="${genre}">Action</var>
<status status="PASS" start="2025-10-28T17:27:46.926916" elapsed="0.133861"/>
</iter>
<iter>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.060777" elapsed="0.001441"/>
</kw>
<msg time="2025-10-28T17:27:47.062218" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.060777" elapsed="0.001441"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.062218" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.191758" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?genre=Drama&amp;limit=10&amp;page=1 
 path_url=/api/v1/movies?genre=Drama&amp;limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:47.191758" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?genre=Drama&amp;limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '4273', 'ETag': 'W/"10b1-+czNfdsem/DHRytjHNoYTe6H8jw"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":10,"pagination":{"next":{"page":2,"limit":10}},"data":[{"_id":"68f7ec4a377d8700e8da0156","customId":"10","title":"Interstellar","synopsis":"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.","director":"Christopher Nolan","genres":["Adventure","Drama","Science Fiction"],"duration":169,"classification":"PG-13","poster":"interstellar.jpg","releaseDate":"2014-11-07T00:00:00.000Z","id":"68f7ec4a377d8700e8da0156"},{"_id":"68f7ec4a377d8700e8da0152","customId":"6","title":"The Dark Knight","synopsis":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","director":"Christopher Nolan","genres":["Action","Crime","Drama"],"duration":152,"classification":"PG-13","poster":"darkknight.jpg","releaseDate":"2008-07-18T00:00:00.000Z","id":"68f7ec4a377d8700e8da0152"},{"_id":"68f7ec4a377d8700e8da0158","customId":"12","title":"The Lord of the Rings: The Fellowship of the Ring","synopsis":"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.","director":"Peter Jackson","genres":["Adventure","Fantasy","Drama"],"duration":178,"classification":"PG-13","poster":"lotr.jpg","releaseDate":"2001-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0158"},{"_id":"68f7ec4a377d8700e8da0157","customId":"11","title":"Gladiator","synopsis":"A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.","director":"Ridley Scott","genres":["Action","Adventure","Drama"],"duration":155,"classification":"R","poster":"gladiator.jpg","releaseDate":"2000-05-05T00:00:00.000Z","id":"68f7ec4a377d8700e8da0157"},{"_id":"68f7ec4a377d8700e8da0153","customId":"7","title":"Fight Club","synopsis":"An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.","director":"David Fincher","genres":["Drama"],"duration":139,"classification":"R","poster":"fightclub.jpg","releaseDate":"1999-10-15T00:00:00.000Z","id":"68f7ec4a377d8700e8da0153"},{"_id":"68f7ec4a377d8700e8da0159","customId":"13","title":"Titanic","synopsis":"A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.","director":"James Cameron","genres":["Drama","Romance"],"duration":194,"classification":"PG-13","poster":"titanic.jpg","releaseDate":"1997-12-19T00:00:00.000Z","id":"68f7ec4a377d8700e8da0159"},{"_id":"68f7ec484bc189e5600e8f88","customId":"3","title":"The Shawshank Redemption","synopsis":"Two imprisoned men bond over a number of years.","director":"Frank Darabont","genres":["Drama"],"duration":142,"classification":"R","poster":"shawshank.jpg","releaseDate":"1994-10-14T00:00:00.000Z","id":"68f7ec484bc189e5600e8f88"},{"_id":"68f7ec4a377d8700e8da0151","customId":"5","title":"Pulp Fiction","synopsis":"The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.","director":"Quentin Tarantino","genres":["Crime","Drama"],"duration":154,"classification":"R","poster":"pulpfiction.jpg","releaseDate":"1994-10-14T00:00:00.000Z","id":"68f7ec4a377d8700e8da0151"},{"_id":"68f7ec4a377d8700e8da0154","customId":"8","title":"Forrest Gump","synopsis":"The presidencies of Kennedy and Johnson, the events of Vietnam, Watergate, and other historical events unfold through the perspective of an Alabama man with an IQ of 75.","director":"Robert Zemeckis","genres":["Drama","Romance"],"duration":142,"classification":"PG-13","poster":"forrestgump.jpg","releaseDate":"1994-07-06T00:00:00.000Z","id":"68f7ec4a377d8700e8da0154"},{"_id":"68f7ec4a377d8700e8da015c","customId":"16","title":"The Lion King","synopsis":"Lion prince Simba and his father are targeted by his bitter uncle, who wants to ascend the throne himself.","director":"Roger Allers, Rob Minkoff","genres":["Animation","Adventure","Drama"],"duration":88,"classification":"G","poster":"lionking.jpg","releaseDate":"1994-06-24T00:00:00.000Z","id":"68f7ec4a377d8700e8da015c"}]} 
 </msg>
<msg time="2025-10-28T17:27:47.191758" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:47.062218" elapsed="0.129540"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:47.191758" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:47.191758" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>genre=${genre}</arg>
<status status="PASS" start="2025-10-28T17:27:47.060777" elapsed="0.130981"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.195179" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:47.194168" elapsed="0.001011"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.197183" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:47.196175" elapsed="0.001008"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:47.191758" elapsed="0.005425"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.198174" level="INFO">Gênero Drama: [{'_id': '68f7ec4a377d8700e8da0156', 'customId': '10', 'title': 'Interstellar', 'synopsis': "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.", 'director': 'Christopher Nolan', 'genres': ['Adventure', 'Drama', 'Science Fiction'], 'duration': 169, 'classification': 'PG-13', 'poster': 'interstellar.jpg', 'releaseDate': '2014-11-07T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0156'}, {'_id': '68f7ec4a377d8700e8da0152', 'customId': '6', 'title': 'The Dark Knight', 'synopsis': 'When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.', 'director': 'Christopher Nolan', 'genres': ['Action', 'Crime', 'Drama'], 'duration': 152, 'classification': 'PG-13', 'poster': 'darkknight.jpg', 'releaseDate': '2008-07-18T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0152'}, {'_id': '68f7ec4a377d8700e8da0158', 'customId': '12', 'title': 'The Lord of the Rings: The Fellowship of the Ring', 'synopsis': 'A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.', 'director': 'Peter Jackson', 'genres': ['Adventure', 'Fantasy', 'Drama'], 'duration': 178, 'classification': 'PG-13', 'poster': 'lotr.jpg', 'releaseDate': '2001-12-19T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0158'}, {'_id': '68f7ec4a377d8700e8da0157', 'customId': '11', 'title': 'Gladiator', 'synopsis': 'A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.', 'director': 'Ridley Scott', 'genres': ['Action', 'Adventure', 'Drama'], 'duration': 155, 'classification': 'R', 'poster': 'gladiator.jpg', 'releaseDate': '2000-05-05T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0157'}, {'_id': '68f7ec4a377d8700e8da0153', 'customId': '7', 'title': 'Fight Club', 'synopsis': 'An insomniac office worker and a devil-may-care soapmaker form an underground fight club that evolves into something much, much more.', 'director': 'David Fincher', 'genres': ['Drama'], 'duration': 139, 'classification': 'R', 'poster': 'fightclub.jpg', 'releaseDate': '1999-10-15T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0153'}, {'_id': '68f7ec4a377d8700e8da0159', 'customId': '13', 'title': 'Titanic', 'synopsis': 'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.', 'director': 'James Cameron', 'genres': ['Drama', 'Romance'], 'duration': 194, 'classification': 'PG-13', 'poster': 'titanic.jpg', 'releaseDate': '1997-12-19T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0159'}, {'_id': '68f7ec484bc189e5600e8f88', 'customId': '3', 'title': 'The Shawshank Redemption', 'synopsis': 'Two imprisoned men bond over a number of years.', 'director': 'Frank Darabont', 'genres': ['Drama'], 'duration': 142, 'classification': 'R', 'poster': 'shawshank.jpg', 'releaseDate': '1994-10-14T00:00:00.000Z', 'id': '68f7ec484bc189e5600e8f88'}, {'_id': '68f7ec4a377d8700e8da0151', 'customId': '5', 'title': 'Pulp Fiction', 'synopsis': 'The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.', 'director': 'Quentin Tarantino', 'genres': ['Crime', 'Drama'], 'duration': 154, 'classification': 'R', 'poster': 'pulpfiction.jpg', 'releaseDate': '1994-10-14T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0151'}, {'_id': '68f7ec4a377d8700e8da0154', 'customId': '8', 'title': 'Forrest Gump', 'synopsis': 'The presidencies of Kennedy and Johnson, the events of Vietnam, Watergate, and other historical events unfold through the perspective of an Alabama man with an IQ of 75.', 'director': 'Robert Zemeckis', 'genres': ['Drama', 'Romance'], 'duration': 142, 'classification': 'PG-13', 'poster': 'forrestgump.jpg', 'releaseDate': '1994-07-06T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da0154'}, {'_id': '68f7ec4a377d8700e8da015c', 'customId': '16', 'title': 'The Lion King', 'synopsis': 'Lion prince Simba and his father are targeted by his bitter uncle, who wants to ascend the throne himself.', 'director': 'Roger Allers, Rob Minkoff', 'genres': ['Animation', 'Adventure', 'Drama'], 'duration': 88, 'classification': 'G', 'poster': 'lionking.jpg', 'releaseDate': '1994-06-24T00:00:00.000Z', 'id': '68f7ec4a377d8700e8da015c'}]</msg>
<arg>Gênero ${genre}: ${response.json()}[data]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.197183" elapsed="0.000991"/>
</kw>
<var name="${genre}">Drama</var>
<status status="PASS" start="2025-10-28T17:27:47.060777" elapsed="0.137397"/>
</iter>
<iter>
<kw name="Get All Movies" owner="movies">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Create Dictionary" owner="BuiltIn">
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.199172" elapsed="0.000000"/>
</kw>
<msg time="2025-10-28T17:27:47.199172" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>$token is not None</arg>
<arg>Create Auth Headers</arg>
<arg>${token}</arg>
<arg>ELSE</arg>
<arg>Create Dictionary</arg>
<arg>Content-Type=application/json</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.199172" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.199172" level="INFO">${params} = {}</msg>
<var>${params}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.199172" elapsed="0.001504"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$title is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>title=${title}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.200676" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.000000"/>
</kw>
<arg>$genre is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>genre=${genre}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>$sort is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>sort=${sort}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.000000"/>
</kw>
<arg>$limit is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>limit=${limit}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.000000"/>
</kw>
<arg>$page is not None</arg>
<arg>Set To Dictionary</arg>
<arg>${params}</arg>
<arg>page=${page}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.000000"/>
</kw>
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.320761" level="INFO">GET Request : url=http://localhost:3000/api/v1/movies?genre=Comedy&amp;limit=10&amp;page=1 
 path_url=/api/v1/movies?genre=Comedy&amp;limit=10&amp;page=1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg time="2025-10-28T17:27:47.320761" level="INFO">GET Response : url=http://localhost:3000/api/v1/movies?genre=Comedy&amp;limit=10&amp;page=1 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '52', 'ETag': 'W/"34-XZQ4O8GgELyv1f9Utec7nJM0ii8"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"count":0,"pagination":{},"data":[]} 
 </msg>
<msg time="2025-10-28T17:27:47.320761" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/movies</arg>
<arg>headers=${headers}</arg>
<arg>params=${params}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-10-28T17:27:47.201077" elapsed="0.119684"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2025-10-28T17:27:47.320761" elapsed="0.000000"/>
</return>
<msg time="2025-10-28T17:27:47.320761" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>genre=${genre}</arg>
<status status="PASS" start="2025-10-28T17:27:47.199172" elapsed="0.121589"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.326119" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>${expected_status}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:47.326119" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.326119" level="INFO">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.json()}[success]</arg>
<arg>True</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2025-10-28T17:27:47.326119" elapsed="0.000000"/>
</kw>
<arg>${response}</arg>
<arg>200</arg>
<status status="PASS" start="2025-10-28T17:27:47.320761" elapsed="0.005358"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.326119" level="INFO">Gênero Comedy: []</msg>
<arg>Gênero ${genre}: ${response.json()}[data]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.326119" elapsed="0.000000"/>
</kw>
<var name="${genre}">Comedy</var>
<status status="PASS" start="2025-10-28T17:27:47.198174" elapsed="0.127945"/>
</iter>
<var>${genre}</var>
<value>@{genres}</value>
<status status="PASS" start="2025-10-28T17:27:46.926916" elapsed="0.399203"/>
</for>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:47.330770" level="INFO">Finished test: TC027 - Filter Movies By Multiple Genres</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.326119" elapsed="0.004651"/>
</kw>
<doc>Filtrar filmes por diferentes gêneros</doc>
<tag>filter</tag>
<tag>movies</tag>
<tag>read</tag>
<status status="PASS" start="2025-10-28T17:27:46.921910" elapsed="0.408860"/>
</test>
<kw name="Teardown API Session" owner="base" type="TEARDOWN">
<kw name="Delete All Sessions" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.337174" level="INFO">Deleting All Sessions</msg>
<doc>Removes all the session objects</doc>
<status status="PASS" start="2025-10-28T17:27:47.333051" elapsed="0.005131"/>
</kw>
<doc>Encerra sessão da API</doc>
<status status="PASS" start="2025-10-28T17:27:47.333051" elapsed="0.005662"/>
</kw>
<doc>Teste das rotas do filmes</doc>
<status status="FAIL" start="2025-10-28T17:27:43.055387" elapsed="4.283326"/>
</suite>
<suite id="s1-s3" name="Reservations" source="C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\tests\server\reservations.robot">
<kw name="Setup API Session" owner="base" type="SETUP">
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.382217" level="INFO">Creating Session using : alias=cinema_api, url=http://localhost:3000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>cinema_api</arg>
<arg>${BASE_URL}</arg>
<arg>verify=true</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-10-28T17:27:47.382217" elapsed="0.000000"/>
</kw>
<doc>Cria sessão da API</doc>
<status status="PASS" start="2025-10-28T17:27:47.382217" elapsed="0.000000"/>
</kw>
<test id="s1-s3-t1" name="TC029 - Get My Reservations As User" line="20">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:47.390629" level="INFO">Starting test: TC029 - Get My Reservations As User</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.389097" elapsed="0.001532"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.390629" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.390629" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.390629" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.390629" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.458059" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:47.458059" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:47.458059" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:47.390629" elapsed="0.070154">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:47.390629" elapsed="0.070154">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:47.390629" elapsed="0.070154">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<kw name="Get My Reservations" owner="reservations">
<var>${response}</var>
<arg>${token}</arg>
<doc>GET /reservations/me - Get all reservations for current user</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<kw name="Dictionary Should Contain Key" owner="Collections">
<arg>${response.json()}</arg>
<arg>data</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<kw name="Dictionary Should Contain Key" owner="Collections">
<arg>${response.json()}</arg>
<arg>count</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Número de reservas do usuário: ${response.json()}[count]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:47.460783" level="INFO">Finished test: TC029 - Get My Reservations As User</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.460783" elapsed="0.000000"/>
</kw>
<doc>Obter reservas do usuário autenticado</doc>
<tag>read</tag>
<tag>reservations</tag>
<tag>user</tag>
<status status="FAIL" start="2025-10-28T17:27:47.382217" elapsed="0.078566">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t2" name="TC030 - Create Reservation As User" line="31">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:47.473056" level="INFO">Starting test: TC030 - Create Reservation As User</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.472053" elapsed="0.001003"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.475053" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.474057" elapsed="0.000996"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.475053" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.475053" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.534463" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:47.534463" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:47.534463" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:47.475053" elapsed="0.059410">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.534463" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.534463" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.534463" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:47.474057" elapsed="0.060406">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.534463" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:47.473056" elapsed="0.061407">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.534463" elapsed="0.000000"/>
</kw>
<kw name="Get All Sessions">
<var>${sessions_response}</var>
<arg>${token}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:47.540798" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.540798" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>len($sessions_response.json()['data']) &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>${session_id}=</arg>
<arg>Set Variable</arg>
<arg>${sessions_response.json()}[data][0][_id]</arg>
<arg>AND</arg>
<arg>${seats}=</arg>
<arg>Create Sample Seats</arg>
<arg>2</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${response}=</arg>
<arg>Create Reservation</arg>
<arg>${token}</arg>
<arg>${session_id}</arg>
<arg>${seats}</arg>
<arg>AND</arg>
<arg>Should Be Success Response</arg>
<arg>${response}</arg>
<arg>201</arg>
<arg>AND</arg>
<arg>Verify Reservation Data Structure</arg>
<arg>${response.json()}[data]</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Não há sessões disponíveis para criar reserva</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.541391" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:47.541391" level="INFO">Finished test: TC030 - Create Reservation As User</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.541391" elapsed="0.000000"/>
</kw>
<doc>Criar nova reserva como usuário</doc>
<tag>create</tag>
<tag>reservations</tag>
<tag>user</tag>
<status status="FAIL" start="2025-10-28T17:27:47.468645" elapsed="0.072746">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t3" name="TC031 - Create Reservation With Invalid Session" line="51">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:47.550759" level="INFO">Starting test: TC031 - Create Reservation With Invalid Session</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.550132" elapsed="0.000627"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.552038" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.552038" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.552038" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.552038" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.617002" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:47.617002" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:47.617002" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:47.553044" elapsed="0.064949">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.617993" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.617993" elapsed="0.000998"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.618991" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:47.550759" elapsed="0.068232">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.618991" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:47.550759" elapsed="0.068232">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.618991" elapsed="0.000000"/>
</kw>
<kw name="Create Sample Seats" owner="reservations">
<var>${seats}</var>
<arg>1</arg>
<status status="NOT RUN" start="2025-10-28T17:27:47.619995" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.619995" elapsed="0.000000"/>
</kw>
<kw name="Create Reservation" owner="reservations">
<var>${response}</var>
<arg>${token}</arg>
<arg>invalid_session_id</arg>
<arg>${seats}</arg>
<arg>expected_status=404</arg>
<doc>POST /reservations - Create new reservation</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.619995" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response">
<arg>${response}</arg>
<arg>404</arg>
<status status="NOT RUN" start="2025-10-28T17:27:47.620991" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:47.620991" level="INFO">Finished test: TC031 - Create Reservation With Invalid Session</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.620991" elapsed="0.000000"/>
</kw>
<doc>Tentativa de criar reserva com sessão inválida</doc>
<tag>create</tag>
<tag>error</tag>
<tag>reservations</tag>
<status status="FAIL" start="2025-10-28T17:27:47.541391" elapsed="0.079600">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t4" name="TC032 - Get Reservation By ID As Owner" line="61">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:47.630626" level="INFO">Starting test: TC032 - Get Reservation By ID As Owner</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.630104" elapsed="0.000522"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.631585" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.631585" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.632666" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.631585" elapsed="0.001081"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.694188" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:47.694188" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:47.694188" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:47.632666" elapsed="0.061522">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:47.631585" elapsed="0.062603">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:47.630626" elapsed="0.063562">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</kw>
<kw name="Get All Sessions">
<var>${sessions_response}</var>
<arg>${token}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>len($sessions_response.json()['data']) &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>${session_id}=</arg>
<arg>Set Variable</arg>
<arg>${sessions_response.json()}[data][0][_id]</arg>
<arg>AND</arg>
<arg>${seats}=</arg>
<arg>Create Sample Seats</arg>
<arg>1</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${create_response}=</arg>
<arg>Create Reservation</arg>
<arg>${token}</arg>
<arg>${session_id}</arg>
<arg>${seats}</arg>
<arg>AND</arg>
<arg>${reservation_id}=</arg>
<arg>Extract Reservation ID From Response</arg>
<arg>${create_response}</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${response}=</arg>
<arg>Get Reservation By ID</arg>
<arg>${token}</arg>
<arg>${reservation_id}</arg>
<arg>AND</arg>
<arg>Should Be Success Response</arg>
<arg>${response}</arg>
<arg>200</arg>
<arg>AND</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()}[data][_id]</arg>
<arg>${reservation_id}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Não foi possível criar reserva para teste</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:47.694188" level="INFO">Finished test: TC032 - Get Reservation By ID As Owner</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.694188" elapsed="0.000000"/>
</kw>
<doc>Buscar reserva por ID sendo o proprietário</doc>
<tag>read</tag>
<tag>reservations</tag>
<tag>user</tag>
<status status="FAIL" start="2025-10-28T17:27:47.627286" elapsed="0.066902">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t5" name="TC033 - Get All Reservations As Admin" line="84">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:47.746733" level="INFO">Starting test: TC033 - Get All Reservations As Admin</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.745734" elapsed="0.000999"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.747740" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.747740" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.747740" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.747740" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.846972" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:47.846972" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:47.846972" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:47.747740" elapsed="0.099232">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.846972" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.846972" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.846972" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:47.746733" elapsed="0.100239">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.846972" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:47.746733" elapsed="0.100239">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.846972" elapsed="0.000000"/>
</kw>
<kw name="Get All Reservations" owner="reservations">
<var>${response}</var>
<arg>${token}</arg>
<arg>page=1</arg>
<arg>limit=5</arg>
<doc>GET /reservations - Get all reservations (admin only)</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.850699" elapsed="0.000000"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:47.850699" elapsed="0.000000"/>
</kw>
<kw name="Dictionary Should Contain Key" owner="Collections">
<arg>${response.json()}</arg>
<arg>data</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.850699" elapsed="0.000000"/>
</kw>
<kw name="Dictionary Should Contain Key" owner="Collections">
<arg>${response.json()}</arg>
<arg>count</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.850699" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>Total de reservas no sistema: ${response.json()}[count]</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.850699" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:47.850699" level="INFO">Finished test: TC033 - Get All Reservations As Admin</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.850699" elapsed="0.000000"/>
</kw>
<doc>Listar todas as reservas como administrador</doc>
<tag>admin</tag>
<tag>read</tag>
<tag>reservations</tag>
<status status="FAIL" start="2025-10-28T17:27:47.743736" elapsed="0.106963">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t6" name="TC034 - Get All Reservations With Pagination" line="95">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:47.862620" level="INFO">Starting test: TC034 - Get All Reservations With Pagination</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.861527" elapsed="0.001093"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.864053" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.864053" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.864053" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.864053" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:47.933682" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:47.933682" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:47.933682" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:47.865059" elapsed="0.069623">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.934682" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.934682" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.934682" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:47.862972" elapsed="0.072726">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:47.935698" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:47.862972" elapsed="0.072726">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.935698" elapsed="0.000000"/>
</kw>
<kw name="Get All Reservations" owner="reservations">
<var>${response}</var>
<arg>${token}</arg>
<arg>page=1</arg>
<arg>limit=3</arg>
<doc>GET /reservations - Get all reservations (admin only)</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.935698" elapsed="0.000984"/>
</kw>
<kw name="Should Be Success Response" owner="base">
<arg>${response}</arg>
<arg>200</arg>
<status status="NOT RUN" start="2025-10-28T17:27:47.936682" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword And Ignore Error" owner="BuiltIn">
<arg>Run Keyword If</arg>
<arg>'pagination' in $response.json()</arg>
<arg>Log</arg>
<arg>Paginação: ${response.json()}[pagination]</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:47.936682" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:47.937682" level="INFO">Finished test: TC034 - Get All Reservations With Pagination</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.937682" elapsed="0.000000"/>
</kw>
<doc>Listar reservas com paginação</doc>
<tag>admin</tag>
<tag>pagination</tag>
<tag>read</tag>
<tag>reservations</tag>
<status status="FAIL" start="2025-10-28T17:27:47.856750" elapsed="0.080932">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t7" name="TC035 - Update Reservation Status As Admin" line="108">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:47.946848" level="INFO">Starting test: TC035 - Update Reservation Status As Admin</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:47.945851" elapsed="0.000997"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.947848" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.947848" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:47.947848" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:47.947848" elapsed="0.000999"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.006670" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:48.006670" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:47 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:48.006670" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:47.948847" elapsed="0.057823">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.010890" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.010890" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.010890" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:47.946848" elapsed="0.064042">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.010890" elapsed="0.000000"/>
</return>
<var>${admin_token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:47.946848" elapsed="0.064042">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.010890" elapsed="0.000000"/>
</kw>
<kw name="Get User Token" owner="base">
<var>${user_token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.013734" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.013734" elapsed="0.000000"/>
</kw>
<kw name="Get All Sessions">
<var>${sessions_response}</var>
<arg>${user_token}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:48.013734" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.013734" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>len($sessions_response.json()['data']) &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>${session_id}=</arg>
<arg>Set Variable</arg>
<arg>${sessions_response.json()}[data][0][_id]</arg>
<arg>AND</arg>
<arg>${seats}=</arg>
<arg>Create Sample Seats</arg>
<arg>1</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${create_response}=</arg>
<arg>Create Reservation</arg>
<arg>${user_token}</arg>
<arg>${session_id}</arg>
<arg>${seats}</arg>
<arg>AND</arg>
<arg>${reservation_id}=</arg>
<arg>Extract Reservation ID From Response</arg>
<arg>${create_response}</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${response}=</arg>
<arg>Update Reservation</arg>
<arg>${admin_token}</arg>
<arg>${reservation_id}</arg>
<arg>status=cancelled</arg>
<arg>AND</arg>
<arg>Should Be Success Response</arg>
<arg>${response}</arg>
<arg>200</arg>
<arg>AND</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()}[data][status]</arg>
<arg>cancelled</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Não foi possível criar reserva para teste de atualização</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.013734" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:48.013734" level="INFO">Finished test: TC035 - Update Reservation Status As Admin</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.013734" elapsed="0.000000"/>
</kw>
<doc>Atualizar status da reserva como administrador</doc>
<tag>admin</tag>
<tag>reservations</tag>
<tag>update</tag>
<status status="FAIL" start="2025-10-28T17:27:47.942848" elapsed="0.070886">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t8" name="TC036 - Update Reservation Payment Status As Admin" line="133">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:48.027009" level="INFO">Starting test: TC036 - Update Reservation Payment Status As Admin</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.026613" elapsed="0.000396"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.029373" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.029373" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.029373" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.029373" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.093192" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:48.093192" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:48 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:48.094187" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:48.029373" elapsed="0.064814">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.094187" elapsed="0.001001"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.095188" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.095188" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:48.028328" elapsed="0.066860">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.095188" elapsed="0.000000"/>
</return>
<var>${admin_token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:48.027508" elapsed="0.067680">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.096192" elapsed="0.000000"/>
</kw>
<kw name="Get User Token" owner="base">
<var>${user_token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.096192" elapsed="0.000997"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.097189" elapsed="0.000000"/>
</kw>
<kw name="Get All Sessions">
<var>${sessions_response}</var>
<arg>${user_token}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:48.097189" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.098191" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>len($sessions_response.json()['data']) &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>${session_id}=</arg>
<arg>Set Variable</arg>
<arg>${sessions_response.json()}[data][0][_id]</arg>
<arg>AND</arg>
<arg>${seats}=</arg>
<arg>Create Sample Seats</arg>
<arg>1</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${create_response}=</arg>
<arg>Create Reservation</arg>
<arg>${user_token}</arg>
<arg>${session_id}</arg>
<arg>${seats}</arg>
<arg>AND</arg>
<arg>${reservation_id}=</arg>
<arg>Extract Reservation ID From Response</arg>
<arg>${create_response}</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${response}=</arg>
<arg>Update Reservation</arg>
<arg>${admin_token}</arg>
<arg>${reservation_id}</arg>
<arg>payment_status=refunded</arg>
<arg>AND</arg>
<arg>Should Be Success Response</arg>
<arg>${response}</arg>
<arg>200</arg>
<arg>AND</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()}[data][paymentStatus]</arg>
<arg>refunded</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Não foi possível criar reserva para teste de pagamento</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.098191" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:48.098191" level="INFO">Finished test: TC036 - Update Reservation Payment Status As Admin</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.098191" elapsed="0.000000"/>
</kw>
<doc>Atualizar status de pagamento como administrador</doc>
<tag>admin</tag>
<tag>reservations</tag>
<tag>update</tag>
<status status="FAIL" start="2025-10-28T17:27:48.020668" elapsed="0.077523">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t9" name="TC037 - Delete Reservation As Admin" line="157">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:48.112067" level="INFO">Starting test: TC037 - Delete Reservation As Admin</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.111741" elapsed="0.000326"/>
</kw>
<kw name="Get Admin Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.112067" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.112067" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.116936" level="INFO">${body} = {'email': 'admin@example.com', 'password': 'admin123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.112067" elapsed="0.004869"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.181388" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body=b'{"email": "admin@example.com", "password": "admin123"}' 
 </msg>
<msg time="2025-10-28T17:27:48.181388" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:48 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:48.181388" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:48.116936" elapsed="0.065460">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.182396" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.182396" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.182396" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${ADMIN_EMAIL}</arg>
<arg>${ADMIN_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:48.112067" elapsed="0.070329">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.183398" elapsed="0.000000"/>
</return>
<var>${admin_token}</var>
<doc>Obtém token de administrador</doc>
<status status="FAIL" start="2025-10-28T17:27:48.112067" elapsed="0.071331">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.183398" elapsed="0.000000"/>
</kw>
<kw name="Get User Token" owner="base">
<var>${user_token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.183398" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.184397" elapsed="0.000000"/>
</kw>
<kw name="Get All Sessions">
<var>${sessions_response}</var>
<arg>${user_token}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:48.184397" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.184397" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>len($sessions_response.json()['data']) &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>${session_id}=</arg>
<arg>Set Variable</arg>
<arg>${sessions_response.json()}[data][0][_id]</arg>
<arg>AND</arg>
<arg>${seats}=</arg>
<arg>Create Sample Seats</arg>
<arg>1</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${create_response}=</arg>
<arg>Create Reservation</arg>
<arg>${user_token}</arg>
<arg>${session_id}</arg>
<arg>${seats}</arg>
<arg>AND</arg>
<arg>${reservation_id}=</arg>
<arg>Extract Reservation ID From Response</arg>
<arg>${create_response}</arg>
<arg>AND</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>AND</arg>
<arg>${response}=</arg>
<arg>Delete Reservation</arg>
<arg>${admin_token}</arg>
<arg>${reservation_id}</arg>
<arg>AND</arg>
<arg>Should Be Success Response</arg>
<arg>${response}</arg>
<arg>200</arg>
<arg>AND</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()}[message]</arg>
<arg>Reservation deleted successfully</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Não foi possível criar reserva para teste de deleção</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.184397" elapsed="0.001001"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:48.185398" level="INFO">Finished test: TC037 - Delete Reservation As Admin</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.185398" elapsed="0.000000"/>
</kw>
<doc>Deletar reserva como administrador</doc>
<tag>admin</tag>
<tag>delete</tag>
<tag>reservations</tag>
<status status="FAIL" start="2025-10-28T17:27:48.106705" elapsed="0.079692">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t10" name="TC038 - Get All Reservations Without Admin Rights" line="181">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:48.196336" level="INFO">Starting test: TC038 - Get All Reservations Without Admin Rights</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.195298" elapsed="0.001038"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.197334" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.197334" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.198333" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.197334" elapsed="0.000999"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.259495" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:48.259495" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:48 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:48.259495" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:48.198333" elapsed="0.061162">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.259495" elapsed="0.001510"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.261005" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.261005" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:48.197334" elapsed="0.063671">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.261005" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:48.196336" elapsed="0.064669">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.261005" elapsed="0.001007"/>
</kw>
<kw name="Get All Reservations" owner="reservations">
<var>${response}</var>
<arg>${token}</arg>
<arg>expected_status=403</arg>
<doc>GET /reservations - Get all reservations (admin only)</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.262012" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response">
<arg>${response}</arg>
<arg>403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:48.262012" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:48.263012" level="INFO">Finished test: TC038 - Get All Reservations Without Admin Rights</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.263012" elapsed="0.000000"/>
</kw>
<doc>Tentativa de listar todas as reservas sem ser admin</doc>
<tag>read</tag>
<tag>reservations</tag>
<tag>security</tag>
<status status="FAIL" start="2025-10-28T17:27:48.192100" elapsed="0.070912">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t11" name="TC039 - Update Reservation Without Admin Rights" line="189">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:48.271638" level="INFO">Starting test: TC039 - Update Reservation Without Admin Rights</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.271638" elapsed="0.000000"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.273636" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.273636" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.274634" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.273636" elapsed="0.000998"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.333023" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:48.333023" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:48 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:48.333023" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:48.274634" elapsed="0.058389">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.333023" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.337495" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.337495" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:48.273636" elapsed="0.063859">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.337495" elapsed="0.000000"/>
</return>
<var>${user_token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:48.272635" elapsed="0.064860">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.337495" elapsed="0.000000"/>
</kw>
<kw name="Update Reservation" owner="reservations">
<var>${response}</var>
<arg>${user_token}</arg>
<arg>60d0fe4f5311236168a109ce</arg>
<arg>status=cancelled</arg>
<arg>expected_status=403</arg>
<doc>PUT /reservations/{id} - Update reservation status (admin only)</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.337495" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response">
<arg>${response}</arg>
<arg>403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:48.337495" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:48.337495" level="INFO">Finished test: TC039 - Update Reservation Without Admin Rights</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.337495" elapsed="0.000000"/>
</kw>
<doc>Tentativa de atualizar reserva sem ser admin</doc>
<tag>reservations</tag>
<tag>security</tag>
<tag>update</tag>
<status status="FAIL" start="2025-10-28T17:27:48.268018" elapsed="0.069477">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t12" name="TC040 - Delete Reservation Without Admin Rights" line="199">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:48.347382" level="INFO">Starting test: TC040 - Delete Reservation Without Admin Rights</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.347382" elapsed="0.001035"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.349413" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.349413" elapsed="0.000000"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.350427" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.349413" elapsed="0.001014"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.412700" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:48.412700" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:48 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:48.412700" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:48.350427" elapsed="0.063275">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.413702" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.414704" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.414704" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:48.348417" elapsed="0.066287">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.414704" elapsed="0.000000"/>
</return>
<var>${user_token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:48.348417" elapsed="0.066287">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.414704" elapsed="0.000997"/>
</kw>
<kw name="Delete Reservation" owner="reservations">
<var>${response}</var>
<arg>${user_token}</arg>
<arg>60d0fe4f5311236168a109ce</arg>
<arg>expected_status=403</arg>
<doc>DELETE /reservations/{id} - Delete reservation (admin only)</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.415701" elapsed="0.000000"/>
</kw>
<kw name="Should Be Error Response">
<arg>${response}</arg>
<arg>403</arg>
<status status="NOT RUN" start="2025-10-28T17:27:48.415701" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:48.416701" level="INFO">Finished test: TC040 - Delete Reservation Without Admin Rights</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.416701" elapsed="0.000000"/>
</kw>
<doc>Tentativa de deletar reserva sem ser admin</doc>
<tag>delete</tag>
<tag>reservations</tag>
<tag>security</tag>
<status status="FAIL" start="2025-10-28T17:27:48.341104" elapsed="0.075597">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<test id="s1-s3-t13" name="TC041 - Create Reservation With Different Payment Methods" line="207">
<kw name="Log" owner="BuiltIn" type="SETUP">
<msg time="2025-10-28T17:27:48.424911" level="INFO">Starting test: TC041 - Create Reservation With Different Payment Methods</msg>
<arg>Starting test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.424911" elapsed="0.000000"/>
</kw>
<kw name="Get User Token" owner="base">
<kw name="Get Auth Token" owner="base">
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.426910" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.425909" elapsed="0.001001"/>
</kw>
<kw name="Create Dictionary" owner="BuiltIn">
<msg time="2025-10-28T17:27:48.426910" level="INFO">${body} = {'email': 'test@example.com', 'password': 'password123'}</msg>
<var>${body}</var>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" start="2025-10-28T17:27:48.426910" elapsed="0.000000"/>
</kw>
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.485807" level="INFO">POST Request : url=http://localhost:3000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "test@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-10-28T17:27:48.485807" level="INFO">POST Response : url=http://localhost:3000/api/v1/auth/login 
 status=401, reason=Unauthorized 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '55', 'ETag': 'W/"37-5uDpJTljPBecOPs/j7OXFdPRcmQ"', 'Date': 'Tue, 28 Oct 2025 20:27:48 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Invalid email or password"} 
 </msg>
<msg time="2025-10-28T17:27:48.485807" level="FAIL">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</msg>
<var>${response}</var>
<arg>cinema_api</arg>
<arg>/auth/login</arg>
<arg>json=${body}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="FAIL" start="2025-10-28T17:27:48.426910" elapsed="0.061799">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.488709" elapsed="0.000000"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<var>${token}</var>
<arg>${response.json()}[data][token]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.488709" elapsed="0.000000"/>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.488709" elapsed="0.000000"/>
</return>
<var>${token}</var>
<arg>${USER_EMAIL}</arg>
<arg>${USER_PASSWORD}</arg>
<doc>Obtém token de autenticação</doc>
<status status="FAIL" start="2025-10-28T17:27:48.425909" elapsed="0.062800">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<return>
<value>${token}</value>
<status status="NOT RUN" start="2025-10-28T17:27:48.488709" elapsed="0.000000"/>
</return>
<var>${token}</var>
<doc>Obtém token de usuário comum</doc>
<status status="FAIL" start="2025-10-28T17:27:48.425909" elapsed="0.062800">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.488709" elapsed="0.000000"/>
</kw>
<kw name="Get All Sessions">
<var>${sessions_response}</var>
<arg>${token}</arg>
<status status="NOT RUN" start="2025-10-28T17:27:48.490753" elapsed="0.000000"/>
</kw>
<kw name="Sleep" owner="BuiltIn">
<arg>0.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.490753" elapsed="0.000000"/>
</kw>
<kw name="Run Keyword If" owner="BuiltIn">
<arg>len($sessions_response.json()['data']) &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>${session_id}=</arg>
<arg>Set Variable</arg>
<arg>${sessions_response.json()}[data][0][_id]</arg>
<arg>AND</arg>
<arg>${seats}=</arg>
<arg>Create Sample Seats</arg>
<arg>1</arg>
<arg>AND</arg>
<arg>@{payment_methods}=</arg>
<arg>Create List</arg>
<arg>credit_card</arg>
<arg>debit_card</arg>
<arg>pix</arg>
<arg>cash</arg>
<arg>AND</arg>
<arg>FOR</arg>
<arg>${method}</arg>
<arg>IN</arg>
<arg>@{payment_methods}</arg>
<arg>Sleep</arg>
<arg>0.5s</arg>
<arg>${response}=</arg>
<arg>Create Reservation</arg>
<arg>${token}</arg>
<arg>${session_id}</arg>
<arg>${seats}</arg>
<arg>payment_method=${method}</arg>
<arg>Run Keyword If</arg>
<arg>${response.status_code} == 201</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()}[data][paymentMethod]</arg>
<arg>${method}</arg>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Método ${method} não suportado: ${response.json()}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Não há sessões para testar métodos de pagamento</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" start="2025-10-28T17:27:48.490753" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn" type="TEARDOWN">
<msg time="2025-10-28T17:27:48.490753" level="INFO">Finished test: TC041 - Create Reservation With Different Payment Methods</msg>
<arg>Finished test: ${TEST_NAME}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-10-28T17:27:48.490753" elapsed="0.000000"/>
</kw>
<doc>Criar reservas com diferentes métodos de pagamento</doc>
<tag>create</tag>
<tag>reservations</tag>
<tag>user</tag>
<status status="FAIL" start="2025-10-28T17:27:48.421903" elapsed="0.068850">HTTPError: 401 Client Error: Unauthorized for url: http://localhost:3000/api/v1/auth/login</status>
</test>
<kw name="Teardown API Session" owner="base" type="TEARDOWN">
<kw name="Delete All Sessions" owner="RequestsLibrary">
<msg time="2025-10-28T17:27:48.497880" level="INFO">Deleting All Sessions</msg>
<doc>Removes all the session objects</doc>
<status status="PASS" start="2025-10-28T17:27:48.492746" elapsed="0.005134"/>
</kw>
<doc>Encerra sessão da API</doc>
<status status="PASS" start="2025-10-28T17:27:48.492746" elapsed="0.005134"/>
</kw>
<doc>Testes das Reservas de filmes</doc>
<status status="FAIL" start="2025-10-28T17:27:47.341953" elapsed="1.155927"/>
</suite>
<status status="FAIL" start="2025-10-28T17:27:40.652655" elapsed="7.853896"/>
</suite>
<statistics>
<total>
<stat pass="13" fail="26" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="12" skip="0">admin</stat>
<stat pass="0" fail="6" skip="0">create</stat>
<stat pass="0" fail="1" skip="0">crud</stat>
<stat pass="0" fail="4" skip="0">delete</stat>
<stat pass="0" fail="5" skip="0">error</stat>
<stat pass="1" fail="1" skip="0">filter</stat>
<stat pass="7" fail="13" skip="0">movies</stat>
<stat pass="1" fail="1" skip="0">pagination</stat>
<stat pass="2" fail="0" skip="0">public</stat>
<stat pass="7" fail="8" skip="0">read</stat>
<stat pass="0" fail="13" skip="0">reservations</stat>
<stat pass="1" fail="0" skip="0">search</stat>
<stat pass="0" fail="6" skip="0">security</stat>
<stat pass="0" fail="1" skip="0">smoke</stat>
<stat pass="1" fail="0" skip="0">sort</stat>
<stat pass="0" fail="7" skip="0">update</stat>
<stat pass="0" fail="4" skip="0">user</stat>
</tag>
<suite>
<stat name="Server" id="s1" pass="13" fail="26" skip="0">Server</stat>
<stat name="Auth" id="s1-s1" pass="6" fail="0" skip="0">Server.Auth</stat>
<stat name="Movies" id="s1-s2" pass="7" fail="13" skip="0">Server.Movies</stat>
<stat name="Reservations" id="s1-s3" pass="0" fail="13" skip="0">Server.Reservations</stat>
</suite>
</statistics>
<errors>
<msg time="2025-10-28T17:27:41.011616" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\auth.resource' on line 28: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:41.011616" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\auth.resource' on line 43: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:41.012627" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\auth.resource' on line 79: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:41.012627" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\auth.resource' on line 89: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:41.012627" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\auth.resource' on line 101: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.076358" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 136: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.077359" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 168: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.078354" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 175: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.078354" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 185: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.079365" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 190: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.079365" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 195: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.079365" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 202: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.405898" level="ERROR">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 12: Importing library 'Faker' failed: ModuleNotFoundError: No module named 'Faker'
Traceback (most recent call last):
  None
PYTHONPATH:
  C:\Users\raphael\anaconda3\Scripts\robot.exe
  C:\Users\raphael\anaconda3\python312.zip
  C:\Users\raphael\anaconda3\DLLs
  C:\Users\raphael\anaconda3\Lib
  C:\Users\raphael\anaconda3
  C:\Users\raphael\anaconda3\Lib\site-packages
  C:\Users\raphael\anaconda3\Lib\site-packages\win32
  C:\Users\raphael\anaconda3\Lib\site-packages\win32\lib
  C:\Users\raphael\anaconda3\Lib\site-packages\Pythonwin</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 25: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 32: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 47: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 53: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 69: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 86: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 92: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 97: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:43.492867" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\movies.resource' on line 123: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.353821" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 17: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 25: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 32: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 43: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 53: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 60: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 68: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 77: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.354348" level="WARN">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\api\reservations.resource' on line 82: The '[Return]' setting is deprecated. Use the 'RETURN' statement instead.</msg>
<msg time="2025-10-28T17:27:47.370815" level="ERROR">Error in file 'C:\Users\raphael\Documents\GitHub\learn\Compass\cinema\test-ciname-challenge\resources\base.resource' on line 12: Importing library 'Faker' failed: ModuleNotFoundError: No module named 'Faker'
Traceback (most recent call last):
  None
PYTHONPATH:
  C:\Users\raphael\anaconda3\Scripts\robot.exe
  C:\Users\raphael\anaconda3\python312.zip
  C:\Users\raphael\anaconda3\DLLs
  C:\Users\raphael\anaconda3\Lib
  C:\Users\raphael\anaconda3
  C:\Users\raphael\anaconda3\Lib\site-packages
  C:\Users\raphael\anaconda3\Lib\site-packages\win32
  C:\Users\raphael\anaconda3\Lib\site-packages\win32\lib
  C:\Users\raphael\anaconda3\Lib\site-packages\Pythonwin</msg>
</errors>
</robot>
